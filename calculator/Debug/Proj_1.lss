
Proj_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e90  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00002e90  00002f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002094  00000000  00000000  00002f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001142  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000626e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000063de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008027  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a0ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a87b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 74 12 	call	0x24e8	; 0x24e8 <main>
      7a:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e9       	ldi	r26, 0x93	; 147
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e9       	ldi	r24, 0x93	; 147
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_init>:

#include "DIO.h"


void DIO_init (u8 portNumber, u8 pinNumber, u8 pinDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_init+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_init+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	82 34       	cpi	r24, 0x42	; 66
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <DIO_init+0x2a>
     b5e:	48 c0       	rjmp	.+144    	; 0xbf0 <DIO_init+0xba>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	23 34       	cpi	r18, 0x43	; 67
     b66:	31 05       	cpc	r19, r1
     b68:	34 f4       	brge	.+12     	; 0xb76 <DIO_init+0x40>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	81 34       	cpi	r24, 0x41	; 65
     b70:	91 05       	cpc	r25, r1
     b72:	71 f0       	breq	.+28     	; 0xb90 <DIO_init+0x5a>
     b74:	cb c0       	rjmp	.+406    	; 0xd0c <DIO_init+0x1d6>
     b76:	2c 81       	ldd	r18, Y+4	; 0x04
     b78:	3d 81       	ldd	r19, Y+5	; 0x05
     b7a:	23 34       	cpi	r18, 0x43	; 67
     b7c:	31 05       	cpc	r19, r1
     b7e:	09 f4       	brne	.+2      	; 0xb82 <DIO_init+0x4c>
     b80:	67 c0       	rjmp	.+206    	; 0xc50 <DIO_init+0x11a>
     b82:	8c 81       	ldd	r24, Y+4	; 0x04
     b84:	9d 81       	ldd	r25, Y+5	; 0x05
     b86:	84 34       	cpi	r24, 0x44	; 68
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_init+0x58>
     b8c:	91 c0       	rjmp	.+290    	; 0xcb0 <DIO_init+0x17a>
     b8e:	be c0       	rjmp	.+380    	; 0xd0c <DIO_init+0x1d6>
	{
		case PORT_A:
			if (pinDirection == OUT)
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	a1 f4       	brne	.+40     	; 0xbbe <DIO_init+0x88>
			{
				SET_BIT(DDRA, pinNumber);
     b96:	aa e3       	ldi	r26, 0x3A	; 58
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_init+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_init+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	a7 c0       	rjmp	.+334    	; 0xd0c <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	88 23       	and	r24, r24
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <DIO_init+0x90>
     bc4:	a3 c0       	rjmp	.+326    	; 0xd0c <DIO_init+0x1d6>
			{
				CLR_BIT(DDRA, pinNumber);
     bc6:	aa e3       	ldi	r26, 0x3A	; 58
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	ea e3       	ldi	r30, 0x3A	; 58
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_init+0xae>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_init+0xaa>
     be8:	80 95       	com	r24
     bea:	84 23       	and	r24, r20
     bec:	8c 93       	st	X, r24
     bee:	8e c0       	rjmp	.+284    	; 0xd0c <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinDirection == OUT)
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	a1 f4       	brne	.+40     	; 0xc1e <DIO_init+0xe8>
			{
				SET_BIT(DDRB, pinNumber);
     bf6:	a7 e3       	ldi	r26, 0x37	; 55
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e7 e3       	ldi	r30, 0x37	; 55
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_init+0xde>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_init+0xda>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	77 c0       	rjmp	.+238    	; 0xd0c <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	88 23       	and	r24, r24
     c22:	09 f0       	breq	.+2      	; 0xc26 <DIO_init+0xf0>
     c24:	73 c0       	rjmp	.+230    	; 0xd0c <DIO_init+0x1d6>
			{
				CLR_BIT(DDRB, pinNumber);
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_init+0x10e>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_init+0x10a>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	5e c0       	rjmp	.+188    	; 0xd0c <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinDirection == OUT)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_init+0x148>
			{
				SET_BIT(DDRC, pinNumber);
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_init+0x13e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_init+0x13a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	47 c0       	rjmp	.+142    	; 0xd0c <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	88 23       	and	r24, r24
     c82:	09 f0       	breq	.+2      	; 0xc86 <DIO_init+0x150>
     c84:	43 c0       	rjmp	.+134    	; 0xd0c <DIO_init+0x1d6>
			{
				CLR_BIT(DDRC, pinNumber);
     c86:	a4 e3       	ldi	r26, 0x34	; 52
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e4 e3       	ldi	r30, 0x34	; 52
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <DIO_init+0x16e>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <DIO_init+0x16a>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	2e c0       	rjmp	.+92     	; 0xd0c <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinDirection == OUT)
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a1 f4       	brne	.+40     	; 0xcde <DIO_init+0x1a8>
			{
				SET_BIT(DDRD, pinNumber);
     cb6:	a1 e3       	ldi	r26, 0x31	; 49
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e3       	ldi	r30, 0x31	; 49
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_init+0x19e>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_init+0x19a>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	17 c0       	rjmp	.+46     	; 0xd0c <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	88 23       	and	r24, r24
     ce2:	a1 f4       	brne	.+40     	; 0xd0c <DIO_init+0x1d6>
			{
				CLR_BIT(DDRD, pinNumber);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_init+0x1cc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_init+0x1c8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <DIO_write>:

void DIO_write (u8 portNumber, u8 pinNumber, u8 pinValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <DIO_write+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <DIO_write+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	82 34       	cpi	r24, 0x42	; 66
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_write+0x2a>
     d44:	48 c0       	rjmp	.+144    	; 0xdd6 <DIO_write+0xba>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	23 34       	cpi	r18, 0x43	; 67
     d4c:	31 05       	cpc	r19, r1
     d4e:	34 f4       	brge	.+12     	; 0xd5c <DIO_write+0x40>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	81 34       	cpi	r24, 0x41	; 65
     d56:	91 05       	cpc	r25, r1
     d58:	71 f0       	breq	.+28     	; 0xd76 <DIO_write+0x5a>
     d5a:	cb c0       	rjmp	.+406    	; 0xef2 <DIO_write+0x1d6>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	23 34       	cpi	r18, 0x43	; 67
     d62:	31 05       	cpc	r19, r1
     d64:	09 f4       	brne	.+2      	; 0xd68 <DIO_write+0x4c>
     d66:	67 c0       	rjmp	.+206    	; 0xe36 <DIO_write+0x11a>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	84 34       	cpi	r24, 0x44	; 68
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_write+0x58>
     d72:	91 c0       	rjmp	.+290    	; 0xe96 <DIO_write+0x17a>
     d74:	be c0       	rjmp	.+380    	; 0xef2 <DIO_write+0x1d6>
	{
		case PORT_A:
			if (pinValue == HIGH)
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	a1 f4       	brne	.+40     	; 0xda4 <DIO_write+0x88>
			{
				SET_BIT(PORTA, pinNumber);
     d7c:	ab e3       	ldi	r26, 0x3B	; 59
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	eb e3       	ldi	r30, 0x3B	; 59
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_write+0x7e>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_write+0x7a>
     d9e:	84 2b       	or	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	a7 c0       	rjmp	.+334    	; 0xef2 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	88 23       	and	r24, r24
     da8:	09 f0       	breq	.+2      	; 0xdac <DIO_write+0x90>
     daa:	a3 c0       	rjmp	.+326    	; 0xef2 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTA, pinNumber);
     dac:	ab e3       	ldi	r26, 0x3B	; 59
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	eb e3       	ldi	r30, 0x3B	; 59
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_write+0xae>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_write+0xaa>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	8e c0       	rjmp	.+284    	; 0xef2 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinValue == HIGH)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	a1 f4       	brne	.+40     	; 0xe04 <DIO_write+0xe8>
			{
				SET_BIT(PORTB, pinNumber);
     ddc:	a8 e3       	ldi	r26, 0x38	; 56
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e8 e3       	ldi	r30, 0x38	; 56
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_write+0xde>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_write+0xda>
     dfe:	84 2b       	or	r24, r20
     e00:	8c 93       	st	X, r24
     e02:	77 c0       	rjmp	.+238    	; 0xef2 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	88 23       	and	r24, r24
     e08:	09 f0       	breq	.+2      	; 0xe0c <DIO_write+0xf0>
     e0a:	73 c0       	rjmp	.+230    	; 0xef2 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTB, pinNumber);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_write+0x10e>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_write+0x10a>
     e2e:	80 95       	com	r24
     e30:	84 23       	and	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	5e c0       	rjmp	.+188    	; 0xef2 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinValue == HIGH)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	a1 f4       	brne	.+40     	; 0xe64 <DIO_write+0x148>
			{
				SET_BIT(PORTC, pinNumber);
     e3c:	a5 e3       	ldi	r26, 0x35	; 53
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e3       	ldi	r30, 0x35	; 53
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_write+0x13e>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_write+0x13a>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	47 c0       	rjmp	.+142    	; 0xef2 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	88 23       	and	r24, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_write+0x150>
     e6a:	43 c0       	rjmp	.+134    	; 0xef2 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTC, pinNumber);
     e6c:	a5 e3       	ldi	r26, 0x35	; 53
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e5 e3       	ldi	r30, 0x35	; 53
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_write+0x16e>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_write+0x16a>
     e8e:	80 95       	com	r24
     e90:	84 23       	and	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	2e c0       	rjmp	.+92     	; 0xef2 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinValue == HIGH)
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <DIO_write+0x1a8>
			{
				SET_BIT(PORTD, pinNumber);
     e9c:	a2 e3       	ldi	r26, 0x32	; 50
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e2 e3       	ldi	r30, 0x32	; 50
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_write+0x19e>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_write+0x19a>
     ebe:	84 2b       	or	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	17 c0       	rjmp	.+46     	; 0xef2 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	88 23       	and	r24, r24
     ec8:	a1 f4       	brne	.+40     	; 0xef2 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTD, pinNumber);
     eca:	a2 e3       	ldi	r26, 0x32	; 50
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e2 e3       	ldi	r30, 0x32	; 50
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_write+0x1cc>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_write+0x1c8>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <DIO_toggle>:

void DIO_toggle (u8 portNumber, u8 pinNumber)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <DIO_toggle+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <DIO_toggle+0x8>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	6a 83       	std	Y+2, r22	; 0x02
	switch (portNumber)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	3c 83       	std	Y+4, r19	; 0x04
     f1a:	2b 83       	std	Y+3, r18	; 0x03
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	82 34       	cpi	r24, 0x42	; 66
     f22:	91 05       	cpc	r25, r1
     f24:	51 f1       	breq	.+84     	; 0xf7a <DIO_toggle+0x78>
     f26:	2b 81       	ldd	r18, Y+3	; 0x03
     f28:	3c 81       	ldd	r19, Y+4	; 0x04
     f2a:	23 34       	cpi	r18, 0x43	; 67
     f2c:	31 05       	cpc	r19, r1
     f2e:	34 f4       	brge	.+12     	; 0xf3c <DIO_toggle+0x3a>
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	81 34       	cpi	r24, 0x41	; 65
     f36:	91 05       	cpc	r25, r1
     f38:	61 f0       	breq	.+24     	; 0xf52 <DIO_toggle+0x50>
     f3a:	5a c0       	rjmp	.+180    	; 0xff0 <DIO_toggle+0xee>
     f3c:	2b 81       	ldd	r18, Y+3	; 0x03
     f3e:	3c 81       	ldd	r19, Y+4	; 0x04
     f40:	23 34       	cpi	r18, 0x43	; 67
     f42:	31 05       	cpc	r19, r1
     f44:	71 f1       	breq	.+92     	; 0xfa2 <DIO_toggle+0xa0>
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	84 34       	cpi	r24, 0x44	; 68
     f4c:	91 05       	cpc	r25, r1
     f4e:	e9 f1       	breq	.+122    	; 0xfca <DIO_toggle+0xc8>
     f50:	4f c0       	rjmp	.+158    	; 0xff0 <DIO_toggle+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA, pinNumber);
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <DIO_toggle+0x6e>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <DIO_toggle+0x6a>
     f74:	84 27       	eor	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	3b c0       	rjmp	.+118    	; 0xff0 <DIO_toggle+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB, pinNumber);
     f7a:	a8 e3       	ldi	r26, 0x38	; 56
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 e3       	ldi	r30, 0x38	; 56
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_toggle+0x96>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_toggle+0x92>
     f9c:	84 27       	eor	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	27 c0       	rjmp	.+78     	; 0xff0 <DIO_toggle+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC, pinNumber);
     fa2:	a5 e3       	ldi	r26, 0x35	; 53
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e5 e3       	ldi	r30, 0x35	; 53
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_toggle+0xbe>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_toggle+0xba>
     fc4:	84 27       	eor	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	13 c0       	rjmp	.+38     	; 0xff0 <DIO_toggle+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD, pinNumber);
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_toggle+0xe6>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_toggle+0xe2>
     fec:	84 27       	eor	r24, r20
     fee:	8c 93       	st	X, r24
			break;
		default:
			// ERR
			break;
	}
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <DIO_read>:

u8   DIO_read (u8 portNumber, u8 pinNumber)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <DIO_read+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <DIO_read+0x8>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinValue = 0;
    1010:	19 82       	std	Y+1, r1	; 0x01
	switch (portNumber)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	4c 81       	ldd	r20, Y+4	; 0x04
    101e:	5d 81       	ldd	r21, Y+5	; 0x05
    1020:	42 34       	cpi	r20, 0x42	; 66
    1022:	51 05       	cpc	r21, r1
    1024:	41 f1       	breq	.+80     	; 0x1076 <DIO_read+0x78>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	83 34       	cpi	r24, 0x43	; 67
    102c:	91 05       	cpc	r25, r1
    102e:	34 f4       	brge	.+12     	; 0x103c <DIO_read+0x3e>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	21 34       	cpi	r18, 0x41	; 65
    1036:	31 05       	cpc	r19, r1
    1038:	61 f0       	breq	.+24     	; 0x1052 <DIO_read+0x54>
    103a:	52 c0       	rjmp	.+164    	; 0x10e0 <DIO_read+0xe2>
    103c:	4c 81       	ldd	r20, Y+4	; 0x04
    103e:	5d 81       	ldd	r21, Y+5	; 0x05
    1040:	43 34       	cpi	r20, 0x43	; 67
    1042:	51 05       	cpc	r21, r1
    1044:	51 f1       	breq	.+84     	; 0x109a <DIO_read+0x9c>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	84 34       	cpi	r24, 0x44	; 68
    104c:	91 05       	cpc	r25, r1
    104e:	b9 f1       	breq	.+110    	; 0x10be <DIO_read+0xc0>
    1050:	47 c0       	rjmp	.+142    	; 0x10e0 <DIO_read+0xe2>
	{
		case PORT_A:
			pinValue = GET_BIT(PINA, pinNumber);
    1052:	e9 e3       	ldi	r30, 0x39	; 57
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a9 01       	movw	r20, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_read+0x6c>
    1066:	55 95       	asr	r21
    1068:	47 95       	ror	r20
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_read+0x68>
    106e:	ca 01       	movw	r24, r20
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	35 c0       	rjmp	.+106    	; 0x10e0 <DIO_read+0xe2>
			break;
		case PORT_B:
			pinValue = GET_BIT(PINB, pinNumber);
    1076:	e6 e3       	ldi	r30, 0x36	; 54
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	88 2f       	mov	r24, r24
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_read+0x90>
    108a:	55 95       	asr	r21
    108c:	47 95       	ror	r20
    108e:	8a 95       	dec	r24
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_read+0x8c>
    1092:	ca 01       	movw	r24, r20
    1094:	81 70       	andi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	23 c0       	rjmp	.+70     	; 0x10e0 <DIO_read+0xe2>
			break;
		case PORT_C:
			pinValue = GET_BIT(PINC, pinNumber);
    109a:	e3 e3       	ldi	r30, 0x33	; 51
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a9 01       	movw	r20, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_read+0xb4>
    10ae:	55 95       	asr	r21
    10b0:	47 95       	ror	r20
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_read+0xb0>
    10b6:	ca 01       	movw	r24, r20
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	11 c0       	rjmp	.+34     	; 0x10e0 <DIO_read+0xe2>
			break;
		case PORT_D:
			pinValue = GET_BIT(PIND, pinNumber);
    10be:	e0 e3       	ldi	r30, 0x30	; 48
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_read+0xd8>
    10d2:	55 95       	asr	r21
    10d4:	47 95       	ror	r20
    10d6:	8a 95       	dec	r24
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_read+0xd4>
    10da:	ca 01       	movw	r24, r20
    10dc:	81 70       	andi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			// ERR
			break;
	}
	return pinValue;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    10fa:	ea e3       	ldi	r30, 0x3A	; 58
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8f e7       	ldi	r24, 0x7F	; 127
    1100:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    1102:	e7 e3       	ldi	r30, 0x37	; 55
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8d ef       	ldi	r24, 0xFD	; 253
    1108:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    110a:	e4 e3       	ldi	r30, 0x34	; 52
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	83 e1       	ldi	r24, 0x13	; 19
    1110:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    1112:	e1 e3       	ldi	r30, 0x31	; 49
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    1118:	eb e3       	ldi	r30, 0x3B	; 59
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    111e:	e8 e3       	ldi	r30, 0x38	; 56
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	84 ef       	ldi	r24, 0xF4	; 244
    1124:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    1126:	e5 e3       	ldi	r30, 0x35	; 53
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    112c:	e2 e3       	ldi	r30, 0x32	; 50
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8c e3       	ldi	r24, 0x3C	; 60
    1132:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    1134:	81 e0       	ldi	r24, 0x01	; 1
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	2e 97       	sbiw	r28, 0x0e	; 14
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	8a 83       	std	Y+2, r24	; 0x02
    1152:	6b 83       	std	Y+3, r22	; 0x03
    1154:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	08 f0       	brcs	.+2      	; 0x1162 <DIO_enu_SetPinDirection+0x26>
    1160:	0c c1       	rjmp	.+536    	; 0x137a <DIO_enu_SetPinDirection+0x23e>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	88 30       	cpi	r24, 0x08	; 8
    1166:	08 f0       	brcs	.+2      	; 0x116a <DIO_enu_SetPinDirection+0x2e>
    1168:	08 c1       	rjmp	.+528    	; 0x137a <DIO_enu_SetPinDirection+0x23e>
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	21 f0       	breq	.+8      	; 0x1178 <DIO_enu_SetPinDirection+0x3c>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	88 23       	and	r24, r24
    1174:	09 f0       	breq	.+2      	; 0x1178 <DIO_enu_SetPinDirection+0x3c>
    1176:	01 c1       	rjmp	.+514    	; 0x137a <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	3e 87       	std	Y+14, r19	; 0x0e
    1180:	2d 87       	std	Y+13, r18	; 0x0d
    1182:	8d 85       	ldd	r24, Y+13	; 0x0d
    1184:	9e 85       	ldd	r25, Y+14	; 0x0e
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <DIO_enu_SetPinDirection+0x52>
    118c:	4f c0       	rjmp	.+158    	; 0x122c <DIO_enu_SetPinDirection+0xf0>
    118e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1190:	3e 85       	ldd	r19, Y+14	; 0x0e
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <DIO_enu_SetPinDirection+0x66>
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	71 f0       	breq	.+28     	; 0x11bc <DIO_enu_SetPinDirection+0x80>
    11a0:	ed c0       	rjmp	.+474    	; 0x137c <DIO_enu_SetPinDirection+0x240>
    11a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    11a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <DIO_enu_SetPinDirection+0x72>
    11ac:	77 c0       	rjmp	.+238    	; 0x129c <DIO_enu_SetPinDirection+0x160>
    11ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	91 05       	cpc	r25, r1
    11b6:	09 f4       	brne	.+2      	; 0x11ba <DIO_enu_SetPinDirection+0x7e>
    11b8:	a9 c0       	rjmp	.+338    	; 0x130c <DIO_enu_SetPinDirection+0x1d0>
    11ba:	e0 c0       	rjmp	.+448    	; 0x137c <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 87       	std	Y+12, r19	; 0x0c
    11c4:	2b 87       	std	Y+11, r18	; 0x0b
    11c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	d1 f0       	breq	.+52     	; 0x1202 <DIO_enu_SetPinDirection+0xc6>
    11ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    11d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    11d2:	21 30       	cpi	r18, 0x01	; 1
    11d4:	31 05       	cpc	r19, r1
    11d6:	09 f0       	breq	.+2      	; 0x11da <DIO_enu_SetPinDirection+0x9e>
    11d8:	d1 c0       	rjmp	.+418    	; 0x137c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    11da:	aa e3       	ldi	r26, 0x3A	; 58
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ea e3       	ldi	r30, 0x3A	; 58
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_enu_SetPinDirection+0xbc>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_enu_SetPinDirection+0xb8>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	bd c0       	rjmp	.+378    	; 0x137c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    1202:	aa e3       	ldi	r26, 0x3A	; 58
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ea e3       	ldi	r30, 0x3A	; 58
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_enu_SetPinDirection+0xe4>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_enu_SetPinDirection+0xe0>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	a8 c0       	rjmp	.+336    	; 0x137c <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3a 87       	std	Y+10, r19	; 0x0a
    1234:	29 87       	std	Y+9, r18	; 0x09
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	d1 f0       	breq	.+52     	; 0x1272 <DIO_enu_SetPinDirection+0x136>
    123e:	29 85       	ldd	r18, Y+9	; 0x09
    1240:	3a 85       	ldd	r19, Y+10	; 0x0a
    1242:	21 30       	cpi	r18, 0x01	; 1
    1244:	31 05       	cpc	r19, r1
    1246:	09 f0       	breq	.+2      	; 0x124a <DIO_enu_SetPinDirection+0x10e>
    1248:	99 c0       	rjmp	.+306    	; 0x137c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    124a:	a7 e3       	ldi	r26, 0x37	; 55
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e7 e3       	ldi	r30, 0x37	; 55
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_enu_SetPinDirection+0x12c>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_enu_SetPinDirection+0x128>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	85 c0       	rjmp	.+266    	; 0x137c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    1272:	a7 e3       	ldi	r26, 0x37	; 55
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e7 e3       	ldi	r30, 0x37	; 55
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_enu_SetPinDirection+0x154>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_enu_SetPinDirection+0x150>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	70 c0       	rjmp	.+224    	; 0x137c <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	38 87       	std	Y+8, r19	; 0x08
    12a4:	2f 83       	std	Y+7, r18	; 0x07
    12a6:	8f 81       	ldd	r24, Y+7	; 0x07
    12a8:	98 85       	ldd	r25, Y+8	; 0x08
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	d1 f0       	breq	.+52     	; 0x12e2 <DIO_enu_SetPinDirection+0x1a6>
    12ae:	2f 81       	ldd	r18, Y+7	; 0x07
    12b0:	38 85       	ldd	r19, Y+8	; 0x08
    12b2:	21 30       	cpi	r18, 0x01	; 1
    12b4:	31 05       	cpc	r19, r1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <DIO_enu_SetPinDirection+0x17e>
    12b8:	61 c0       	rjmp	.+194    	; 0x137c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    12ba:	a4 e3       	ldi	r26, 0x34	; 52
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e4 e3       	ldi	r30, 0x34	; 52
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_enu_SetPinDirection+0x19c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_enu_SetPinDirection+0x198>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	4d c0       	rjmp	.+154    	; 0x137c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    12e2:	a4 e3       	ldi	r26, 0x34	; 52
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e4 e3       	ldi	r30, 0x34	; 52
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_enu_SetPinDirection+0x1c4>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_enu_SetPinDirection+0x1c0>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	38 c0       	rjmp	.+112    	; 0x137c <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	3e 83       	std	Y+6, r19	; 0x06
    1314:	2d 83       	std	Y+5, r18	; 0x05
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	c9 f0       	breq	.+50     	; 0x1350 <DIO_enu_SetPinDirection+0x214>
    131e:	2d 81       	ldd	r18, Y+5	; 0x05
    1320:	3e 81       	ldd	r19, Y+6	; 0x06
    1322:	21 30       	cpi	r18, 0x01	; 1
    1324:	31 05       	cpc	r19, r1
    1326:	51 f5       	brne	.+84     	; 0x137c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    1328:	a1 e3       	ldi	r26, 0x31	; 49
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e1 e3       	ldi	r30, 0x31	; 49
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_enu_SetPinDirection+0x20a>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_enu_SetPinDirection+0x206>
    134a:	84 2b       	or	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	16 c0       	rjmp	.+44     	; 0x137c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_enu_SetPinDirection+0x232>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_enu_SetPinDirection+0x22e>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	01 c0       	rjmp	.+2      	; 0x137c <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    137a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	2e 96       	adiw	r28, 0x0e	; 14
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	2e 97       	sbiw	r28, 0x0e	; 14
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	6b 83       	std	Y+3, r22	; 0x03
    13a8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	84 30       	cpi	r24, 0x04	; 4
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <DIO_enu_SetPinValue+0x26>
    13b4:	0c c1       	rjmp	.+536    	; 0x15ce <DIO_enu_SetPinValue+0x23e>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 30       	cpi	r24, 0x08	; 8
    13ba:	08 f0       	brcs	.+2      	; 0x13be <DIO_enu_SetPinValue+0x2e>
    13bc:	08 c1       	rjmp	.+528    	; 0x15ce <DIO_enu_SetPinValue+0x23e>
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	21 f0       	breq	.+8      	; 0x13cc <DIO_enu_SetPinValue+0x3c>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	88 23       	and	r24, r24
    13c8:	09 f0       	breq	.+2      	; 0x13cc <DIO_enu_SetPinValue+0x3c>
    13ca:	01 c1       	rjmp	.+514    	; 0x15ce <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3e 87       	std	Y+14, r19	; 0x0e
    13d4:	2d 87       	std	Y+13, r18	; 0x0d
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	09 f4       	brne	.+2      	; 0x13e2 <DIO_enu_SetPinValue+0x52>
    13e0:	4f c0       	rjmp	.+158    	; 0x1480 <DIO_enu_SetPinValue+0xf0>
    13e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    13e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_enu_SetPinValue+0x66>
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	71 f0       	breq	.+28     	; 0x1410 <DIO_enu_SetPinValue+0x80>
    13f4:	ed c0       	rjmp	.+474    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
    13f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    13f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <DIO_enu_SetPinValue+0x72>
    1400:	77 c0       	rjmp	.+238    	; 0x14f0 <DIO_enu_SetPinValue+0x160>
    1402:	8d 85       	ldd	r24, Y+13	; 0x0d
    1404:	9e 85       	ldd	r25, Y+14	; 0x0e
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	09 f4       	brne	.+2      	; 0x140e <DIO_enu_SetPinValue+0x7e>
    140c:	a9 c0       	rjmp	.+338    	; 0x1560 <DIO_enu_SetPinValue+0x1d0>
    140e:	e0 c0       	rjmp	.+448    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	3c 87       	std	Y+12, r19	; 0x0c
    1418:	2b 87       	std	Y+11, r18	; 0x0b
    141a:	8b 85       	ldd	r24, Y+11	; 0x0b
    141c:	9c 85       	ldd	r25, Y+12	; 0x0c
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	d1 f0       	breq	.+52     	; 0x1456 <DIO_enu_SetPinValue+0xc6>
    1422:	2b 85       	ldd	r18, Y+11	; 0x0b
    1424:	3c 85       	ldd	r19, Y+12	; 0x0c
    1426:	21 30       	cpi	r18, 0x01	; 1
    1428:	31 05       	cpc	r19, r1
    142a:	09 f0       	breq	.+2      	; 0x142e <DIO_enu_SetPinValue+0x9e>
    142c:	d1 c0       	rjmp	.+418    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    142e:	ab e3       	ldi	r26, 0x3B	; 59
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e3       	ldi	r30, 0x3B	; 59
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_enu_SetPinValue+0xbc>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_enu_SetPinValue+0xb8>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	bd c0       	rjmp	.+378    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    1456:	ab e3       	ldi	r26, 0x3B	; 59
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e3       	ldi	r30, 0x3B	; 59
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_enu_SetPinValue+0xe4>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_enu_SetPinValue+0xe0>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	a8 c0       	rjmp	.+336    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3a 87       	std	Y+10, r19	; 0x0a
    1488:	29 87       	std	Y+9, r18	; 0x09
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	d1 f0       	breq	.+52     	; 0x14c6 <DIO_enu_SetPinValue+0x136>
    1492:	29 85       	ldd	r18, Y+9	; 0x09
    1494:	3a 85       	ldd	r19, Y+10	; 0x0a
    1496:	21 30       	cpi	r18, 0x01	; 1
    1498:	31 05       	cpc	r19, r1
    149a:	09 f0       	breq	.+2      	; 0x149e <DIO_enu_SetPinValue+0x10e>
    149c:	99 c0       	rjmp	.+306    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    149e:	a8 e3       	ldi	r26, 0x38	; 56
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_enu_SetPinValue+0x12c>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_enu_SetPinValue+0x128>
    14c0:	84 2b       	or	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	85 c0       	rjmp	.+266    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    14c6:	a8 e3       	ldi	r26, 0x38	; 56
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e8 e3       	ldi	r30, 0x38	; 56
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_enu_SetPinValue+0x154>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_enu_SetPinValue+0x150>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	70 c0       	rjmp	.+224    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	38 87       	std	Y+8, r19	; 0x08
    14f8:	2f 83       	std	Y+7, r18	; 0x07
    14fa:	8f 81       	ldd	r24, Y+7	; 0x07
    14fc:	98 85       	ldd	r25, Y+8	; 0x08
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	d1 f0       	breq	.+52     	; 0x1536 <DIO_enu_SetPinValue+0x1a6>
    1502:	2f 81       	ldd	r18, Y+7	; 0x07
    1504:	38 85       	ldd	r19, Y+8	; 0x08
    1506:	21 30       	cpi	r18, 0x01	; 1
    1508:	31 05       	cpc	r19, r1
    150a:	09 f0       	breq	.+2      	; 0x150e <DIO_enu_SetPinValue+0x17e>
    150c:	61 c0       	rjmp	.+194    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    150e:	a5 e3       	ldi	r26, 0x35	; 53
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e3       	ldi	r30, 0x35	; 53
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_enu_SetPinValue+0x19c>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_enu_SetPinValue+0x198>
    1530:	84 2b       	or	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	4d c0       	rjmp	.+154    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    1536:	a5 e3       	ldi	r26, 0x35	; 53
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e3       	ldi	r30, 0x35	; 53
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_enu_SetPinValue+0x1c4>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_enu_SetPinValue+0x1c0>
    1558:	80 95       	com	r24
    155a:	84 23       	and	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	38 c0       	rjmp	.+112    	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3e 83       	std	Y+6, r19	; 0x06
    1568:	2d 83       	std	Y+5, r18	; 0x05
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	c9 f0       	breq	.+50     	; 0x15a4 <DIO_enu_SetPinValue+0x214>
    1572:	2d 81       	ldd	r18, Y+5	; 0x05
    1574:	3e 81       	ldd	r19, Y+6	; 0x06
    1576:	21 30       	cpi	r18, 0x01	; 1
    1578:	31 05       	cpc	r19, r1
    157a:	51 f5       	brne	.+84     	; 0x15d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    157c:	a2 e3       	ldi	r26, 0x32	; 50
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e2 e3       	ldi	r30, 0x32	; 50
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_enu_SetPinValue+0x20a>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_enu_SetPinValue+0x206>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	16 c0       	rjmp	.+44     	; 0x15d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    15a4:	a2 e3       	ldi	r26, 0x32	; 50
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e2 e3       	ldi	r30, 0x32	; 50
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_enu_SetPinValue+0x232>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_enu_SetPinValue+0x22e>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    15ce:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d2:	2e 96       	adiw	r28, 0x0e	; 14
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	27 97       	sbiw	r28, 0x07	; 7
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	6b 83       	std	Y+3, r22	; 0x03
    15fc:	5d 83       	std	Y+5, r21	; 0x05
    15fe:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	84 30       	cpi	r24, 0x04	; 4
    1608:	08 f0       	brcs	.+2      	; 0x160c <DIO_enu_GetPinValue+0x28>
    160a:	7a c0       	rjmp	.+244    	; 0x1700 <DIO_enu_GetPinValue+0x11c>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 30       	cpi	r24, 0x08	; 8
    1610:	08 f0       	brcs	.+2      	; 0x1614 <DIO_enu_GetPinValue+0x30>
    1612:	76 c0       	rjmp	.+236    	; 0x1700 <DIO_enu_GetPinValue+0x11c>
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_enu_GetPinValue+0x3a>
    161c:	71 c0       	rjmp	.+226    	; 0x1700 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	3f 83       	std	Y+7, r19	; 0x07
    1626:	2e 83       	std	Y+6, r18	; 0x06
    1628:	4e 81       	ldd	r20, Y+6	; 0x06
    162a:	5f 81       	ldd	r21, Y+7	; 0x07
    162c:	41 30       	cpi	r20, 0x01	; 1
    162e:	51 05       	cpc	r21, r1
    1630:	59 f1       	breq	.+86     	; 0x1688 <DIO_enu_GetPinValue+0xa4>
    1632:	8e 81       	ldd	r24, Y+6	; 0x06
    1634:	9f 81       	ldd	r25, Y+7	; 0x07
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	91 05       	cpc	r25, r1
    163a:	34 f4       	brge	.+12     	; 0x1648 <DIO_enu_GetPinValue+0x64>
    163c:	2e 81       	ldd	r18, Y+6	; 0x06
    163e:	3f 81       	ldd	r19, Y+7	; 0x07
    1640:	21 15       	cp	r18, r1
    1642:	31 05       	cpc	r19, r1
    1644:	69 f0       	breq	.+26     	; 0x1660 <DIO_enu_GetPinValue+0x7c>
    1646:	5d c0       	rjmp	.+186    	; 0x1702 <DIO_enu_GetPinValue+0x11e>
    1648:	4e 81       	ldd	r20, Y+6	; 0x06
    164a:	5f 81       	ldd	r21, Y+7	; 0x07
    164c:	42 30       	cpi	r20, 0x02	; 2
    164e:	51 05       	cpc	r21, r1
    1650:	79 f1       	breq	.+94     	; 0x16b0 <DIO_enu_GetPinValue+0xcc>
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	83 30       	cpi	r24, 0x03	; 3
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <DIO_enu_GetPinValue+0x7a>
    165c:	3d c0       	rjmp	.+122    	; 0x16d8 <DIO_enu_GetPinValue+0xf4>
    165e:	51 c0       	rjmp	.+162    	; 0x1702 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    1660:	e9 e3       	ldi	r30, 0x39	; 57
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_enu_GetPinValue+0x94>
    1674:	55 95       	asr	r21
    1676:	47 95       	ror	r20
    1678:	8a 95       	dec	r24
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_enu_GetPinValue+0x90>
    167c:	ca 01       	movw	r24, r20
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	ec 81       	ldd	r30, Y+4	; 0x04
    1682:	fd 81       	ldd	r31, Y+5	; 0x05
    1684:	80 83       	st	Z, r24
    1686:	3d c0       	rjmp	.+122    	; 0x1702 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    1688:	e6 e3       	ldi	r30, 0x36	; 54
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a9 01       	movw	r20, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_enu_GetPinValue+0xbc>
    169c:	55 95       	asr	r21
    169e:	47 95       	ror	r20
    16a0:	8a 95       	dec	r24
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_enu_GetPinValue+0xb8>
    16a4:	ca 01       	movw	r24, r20
    16a6:	81 70       	andi	r24, 0x01	; 1
    16a8:	ec 81       	ldd	r30, Y+4	; 0x04
    16aa:	fd 81       	ldd	r31, Y+5	; 0x05
    16ac:	80 83       	st	Z, r24
    16ae:	29 c0       	rjmp	.+82     	; 0x1702 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    16b0:	e3 e3       	ldi	r30, 0x33	; 51
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a9 01       	movw	r20, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_enu_GetPinValue+0xe4>
    16c4:	55 95       	asr	r21
    16c6:	47 95       	ror	r20
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_enu_GetPinValue+0xe0>
    16cc:	ca 01       	movw	r24, r20
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	ec 81       	ldd	r30, Y+4	; 0x04
    16d2:	fd 81       	ldd	r31, Y+5	; 0x05
    16d4:	80 83       	st	Z, r24
    16d6:	15 c0       	rjmp	.+42     	; 0x1702 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    16d8:	e0 e3       	ldi	r30, 0x30	; 48
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a9 01       	movw	r20, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_enu_GetPinValue+0x10c>
    16ec:	55 95       	asr	r21
    16ee:	47 95       	ror	r20
    16f0:	8a 95       	dec	r24
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_enu_GetPinValue+0x108>
    16f4:	ca 01       	movw	r24, r20
    16f6:	81 70       	andi	r24, 0x01	; 1
    16f8:	ec 81       	ldd	r30, Y+4	; 0x04
    16fa:	fd 81       	ldd	r31, Y+5	; 0x05
    16fc:	80 83       	st	Z, r24
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    1700:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
}
    1704:	27 96       	adiw	r28, 0x07	; 7
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	2d 97       	sbiw	r28, 0x0d	; 13
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	08 f0       	brcs	.+2      	; 0x173a <DIO_enu_SetPortDirection+0x24>
    1738:	84 c0       	rjmp	.+264    	; 0x1842 <DIO_enu_SetPortDirection+0x12c>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	21 f0       	breq	.+8      	; 0x1748 <DIO_enu_SetPortDirection+0x32>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 23       	and	r24, r24
    1744:	09 f0       	breq	.+2      	; 0x1748 <DIO_enu_SetPortDirection+0x32>
    1746:	7d c0       	rjmp	.+250    	; 0x1842 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	3d 87       	std	Y+13, r19	; 0x0d
    1750:	2c 87       	std	Y+12, r18	; 0x0c
    1752:	8c 85       	ldd	r24, Y+12	; 0x0c
    1754:	9d 85       	ldd	r25, Y+13	; 0x0d
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	91 05       	cpc	r25, r1
    175a:	71 f1       	breq	.+92     	; 0x17b8 <DIO_enu_SetPortDirection+0xa2>
    175c:	2c 85       	ldd	r18, Y+12	; 0x0c
    175e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	2c f4       	brge	.+10     	; 0x1770 <DIO_enu_SetPortDirection+0x5a>
    1766:	8c 85       	ldd	r24, Y+12	; 0x0c
    1768:	9d 85       	ldd	r25, Y+13	; 0x0d
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f0       	breq	.+26     	; 0x1788 <DIO_enu_SetPortDirection+0x72>
    176e:	6a c0       	rjmp	.+212    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
    1770:	2c 85       	ldd	r18, Y+12	; 0x0c
    1772:	3d 85       	ldd	r19, Y+13	; 0x0d
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	b1 f1       	breq	.+108    	; 0x17e6 <DIO_enu_SetPortDirection+0xd0>
    177a:	8c 85       	ldd	r24, Y+12	; 0x0c
    177c:	9d 85       	ldd	r25, Y+13	; 0x0d
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	91 05       	cpc	r25, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <DIO_enu_SetPortDirection+0x70>
    1784:	47 c0       	rjmp	.+142    	; 0x1814 <DIO_enu_SetPortDirection+0xfe>
    1786:	5e c0       	rjmp	.+188    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3b 87       	std	Y+11, r19	; 0x0b
    1790:	2a 87       	std	Y+10, r18	; 0x0a
    1792:	8a 85       	ldd	r24, Y+10	; 0x0a
    1794:	9b 85       	ldd	r25, Y+11	; 0x0b
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	59 f0       	breq	.+22     	; 0x17b0 <DIO_enu_SetPortDirection+0x9a>
    179a:	2a 85       	ldd	r18, Y+10	; 0x0a
    179c:	3b 85       	ldd	r19, Y+11	; 0x0b
    179e:	21 30       	cpi	r18, 0x01	; 1
    17a0:	31 05       	cpc	r19, r1
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <DIO_enu_SetPortDirection+0x90>
    17a4:	4f c0       	rjmp	.+158    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    17a6:	ea e3       	ldi	r30, 0x3A	; 58
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	80 83       	st	Z, r24
    17ae:	4a c0       	rjmp	.+148    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    17b0:	ea e3       	ldi	r30, 0x3A	; 58
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	10 82       	st	Z, r1
    17b6:	46 c0       	rjmp	.+140    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	39 87       	std	Y+9, r19	; 0x09
    17c0:	28 87       	std	Y+8, r18	; 0x08
    17c2:	88 85       	ldd	r24, Y+8	; 0x08
    17c4:	99 85       	ldd	r25, Y+9	; 0x09
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	51 f0       	breq	.+20     	; 0x17de <DIO_enu_SetPortDirection+0xc8>
    17ca:	28 85       	ldd	r18, Y+8	; 0x08
    17cc:	39 85       	ldd	r19, Y+9	; 0x09
    17ce:	21 30       	cpi	r18, 0x01	; 1
    17d0:	31 05       	cpc	r19, r1
    17d2:	c1 f5       	brne	.+112    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    17d4:	e7 e3       	ldi	r30, 0x37	; 55
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	8f ef       	ldi	r24, 0xFF	; 255
    17da:	80 83       	st	Z, r24
    17dc:	33 c0       	rjmp	.+102    	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    17de:	e7 e3       	ldi	r30, 0x37	; 55
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	10 82       	st	Z, r1
    17e4:	2f c0       	rjmp	.+94     	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3f 83       	std	Y+7, r19	; 0x07
    17ee:	2e 83       	std	Y+6, r18	; 0x06
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	9f 81       	ldd	r25, Y+7	; 0x07
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	51 f0       	breq	.+20     	; 0x180c <DIO_enu_SetPortDirection+0xf6>
    17f8:	2e 81       	ldd	r18, Y+6	; 0x06
    17fa:	3f 81       	ldd	r19, Y+7	; 0x07
    17fc:	21 30       	cpi	r18, 0x01	; 1
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f5       	brne	.+66     	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    1802:	e4 e3       	ldi	r30, 0x34	; 52
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	80 83       	st	Z, r24
    180a:	1c c0       	rjmp	.+56     	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    180c:	e4 e3       	ldi	r30, 0x34	; 52
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	10 82       	st	Z, r1
    1812:	18 c0       	rjmp	.+48     	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	3d 83       	std	Y+5, r19	; 0x05
    181c:	2c 83       	std	Y+4, r18	; 0x04
    181e:	8c 81       	ldd	r24, Y+4	; 0x04
    1820:	9d 81       	ldd	r25, Y+5	; 0x05
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	51 f0       	breq	.+20     	; 0x183a <DIO_enu_SetPortDirection+0x124>
    1826:	2c 81       	ldd	r18, Y+4	; 0x04
    1828:	3d 81       	ldd	r19, Y+5	; 0x05
    182a:	21 30       	cpi	r18, 0x01	; 1
    182c:	31 05       	cpc	r19, r1
    182e:	51 f4       	brne	.+20     	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    1830:	e1 e3       	ldi	r30, 0x31	; 49
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	80 83       	st	Z, r24
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    183a:	e1 e3       	ldi	r30, 0x31	; 49
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	10 82       	st	Z, r1
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1842:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
}
    1846:	2d 96       	adiw	r28, 0x0d	; 13
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	00 d0       	rcall	.+0      	; 0x185e <DIO_enu_SetPortValue+0x6>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <DIO_enu_SetPortValue+0x8>
    1860:	0f 92       	push	r0
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	8a 83       	std	Y+2, r24	; 0x02
    1868:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	98 f5       	brcc	.+102    	; 0x18da <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3d 83       	std	Y+5, r19	; 0x05
    187c:	2c 83       	std	Y+4, r18	; 0x04
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	91 05       	cpc	r25, r1
    1886:	d1 f0       	breq	.+52     	; 0x18bc <DIO_enu_SetPortValue+0x64>
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	3d 81       	ldd	r19, Y+5	; 0x05
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	2c f4       	brge	.+10     	; 0x189c <DIO_enu_SetPortValue+0x44>
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	61 f0       	breq	.+24     	; 0x18b2 <DIO_enu_SetPortValue+0x5a>
    189a:	20 c0       	rjmp	.+64     	; 0x18dc <DIO_enu_SetPortValue+0x84>
    189c:	2c 81       	ldd	r18, Y+4	; 0x04
    189e:	3d 81       	ldd	r19, Y+5	; 0x05
    18a0:	22 30       	cpi	r18, 0x02	; 2
    18a2:	31 05       	cpc	r19, r1
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <DIO_enu_SetPortValue+0x6e>
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	81 f0       	breq	.+32     	; 0x18d0 <DIO_enu_SetPortValue+0x78>
    18b0:	15 c0       	rjmp	.+42     	; 0x18dc <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    18b2:	eb e3       	ldi	r30, 0x3B	; 59
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	80 83       	st	Z, r24
    18ba:	10 c0       	rjmp	.+32     	; 0x18dc <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    18bc:	e8 e3       	ldi	r30, 0x38	; 56
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	80 83       	st	Z, r24
    18c4:	0b c0       	rjmp	.+22     	; 0x18dc <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    18c6:	e5 e3       	ldi	r30, 0x35	; 53
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	80 83       	st	Z, r24
    18ce:	06 c0       	rjmp	.+12     	; 0x18dc <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    18d0:	e2 e3       	ldi	r30, 0x32	; 50
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	80 83       	st	Z, r24
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    18da:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <DIO_enu_GetPortValue+0x6>
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <DIO_enu_GetPortValue+0x8>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <DIO_enu_GetPortValue+0xa>
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	8a 83       	std	Y+2, r24	; 0x02
    18fe:	7c 83       	std	Y+4, r23	; 0x04
    1900:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	84 30       	cpi	r24, 0x04	; 4
    190a:	08 f0       	brcs	.+2      	; 0x190e <DIO_enu_GetPortValue+0x20>
    190c:	3f c0       	rjmp	.+126    	; 0x198c <DIO_enu_GetPortValue+0x9e>
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	9c 81       	ldd	r25, Y+4	; 0x04
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	d9 f1       	breq	.+118    	; 0x198c <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	3e 83       	std	Y+6, r19	; 0x06
    191e:	2d 83       	std	Y+5, r18	; 0x05
    1920:	8d 81       	ldd	r24, Y+5	; 0x05
    1922:	9e 81       	ldd	r25, Y+6	; 0x06
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	91 05       	cpc	r25, r1
    1928:	e1 f0       	breq	.+56     	; 0x1962 <DIO_enu_GetPortValue+0x74>
    192a:	2d 81       	ldd	r18, Y+5	; 0x05
    192c:	3e 81       	ldd	r19, Y+6	; 0x06
    192e:	22 30       	cpi	r18, 0x02	; 2
    1930:	31 05       	cpc	r19, r1
    1932:	2c f4       	brge	.+10     	; 0x193e <DIO_enu_GetPortValue+0x50>
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	61 f0       	breq	.+24     	; 0x1954 <DIO_enu_GetPortValue+0x66>
    193c:	28 c0       	rjmp	.+80     	; 0x198e <DIO_enu_GetPortValue+0xa0>
    193e:	2d 81       	ldd	r18, Y+5	; 0x05
    1940:	3e 81       	ldd	r19, Y+6	; 0x06
    1942:	22 30       	cpi	r18, 0x02	; 2
    1944:	31 05       	cpc	r19, r1
    1946:	a1 f0       	breq	.+40     	; 0x1970 <DIO_enu_GetPortValue+0x82>
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	b1 f0       	breq	.+44     	; 0x197e <DIO_enu_GetPortValue+0x90>
    1952:	1d c0       	rjmp	.+58     	; 0x198e <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    1954:	e9 e3       	ldi	r30, 0x39	; 57
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 83       	st	Z, r24
    1960:	16 c0       	rjmp	.+44     	; 0x198e <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    1962:	e6 e3       	ldi	r30, 0x36	; 54
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	eb 81       	ldd	r30, Y+3	; 0x03
    196a:	fc 81       	ldd	r31, Y+4	; 0x04
    196c:	80 83       	st	Z, r24
    196e:	0f c0       	rjmp	.+30     	; 0x198e <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    1970:	e3 e3       	ldi	r30, 0x33	; 51
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	eb 81       	ldd	r30, Y+3	; 0x03
    1978:	fc 81       	ldd	r31, Y+4	; 0x04
    197a:	80 83       	st	Z, r24
    197c:	08 c0       	rjmp	.+16     	; 0x198e <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    197e:	e0 e3       	ldi	r30, 0x30	; 48
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	eb 81       	ldd	r30, Y+3	; 0x03
    1986:	fc 81       	ldd	r31, Y+4	; 0x04
    1988:	80 83       	st	Z, r24
    198a:	01 c0       	rjmp	.+2      	; 0x198e <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    198c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    198e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1990:	26 96       	adiw	r28, 0x06	; 6
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <DIO_enu_ToggPin+0x6>
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <DIO_enu_ToggPin+0x8>
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	8a 83       	std	Y+2, r24	; 0x02
    19b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <DIO_enu_ToggPin+0x1e>
    19be:	73 c0       	rjmp	.+230    	; 0x1aa6 <DIO_enu_ToggPin+0x104>
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 30       	cpi	r24, 0x08	; 8
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <DIO_enu_ToggPin+0x26>
    19c6:	6f c0       	rjmp	.+222    	; 0x1aa6 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3d 83       	std	Y+5, r19	; 0x05
    19d0:	2c 83       	std	Y+4, r18	; 0x04
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	49 f1       	breq	.+82     	; 0x1a2e <DIO_enu_ToggPin+0x8c>
    19dc:	2c 81       	ldd	r18, Y+4	; 0x04
    19de:	3d 81       	ldd	r19, Y+5	; 0x05
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <DIO_enu_ToggPin+0x4e>
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	61 f0       	breq	.+24     	; 0x1a06 <DIO_enu_ToggPin+0x64>
    19ee:	5c c0       	rjmp	.+184    	; 0x1aa8 <DIO_enu_ToggPin+0x106>
    19f0:	2c 81       	ldd	r18, Y+4	; 0x04
    19f2:	3d 81       	ldd	r19, Y+5	; 0x05
    19f4:	22 30       	cpi	r18, 0x02	; 2
    19f6:	31 05       	cpc	r19, r1
    19f8:	71 f1       	breq	.+92     	; 0x1a56 <DIO_enu_ToggPin+0xb4>
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	83 30       	cpi	r24, 0x03	; 3
    1a00:	91 05       	cpc	r25, r1
    1a02:	e9 f1       	breq	.+122    	; 0x1a7e <DIO_enu_ToggPin+0xdc>
    1a04:	51 c0       	rjmp	.+162    	; 0x1aa8 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    1a06:	ab e3       	ldi	r26, 0x3B	; 59
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	eb e3       	ldi	r30, 0x3B	; 59
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	02 2e       	mov	r0, r18
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <DIO_enu_ToggPin+0x82>
    1a20:	88 0f       	add	r24, r24
    1a22:	99 1f       	adc	r25, r25
    1a24:	0a 94       	dec	r0
    1a26:	e2 f7       	brpl	.-8      	; 0x1a20 <DIO_enu_ToggPin+0x7e>
    1a28:	84 27       	eor	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	3d c0       	rjmp	.+122    	; 0x1aa8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    1a2e:	a8 e3       	ldi	r26, 0x38	; 56
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e8 e3       	ldi	r30, 0x38	; 56
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <DIO_enu_ToggPin+0xaa>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <DIO_enu_ToggPin+0xa6>
    1a50:	84 27       	eor	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	29 c0       	rjmp	.+82     	; 0x1aa8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    1a56:	a5 e3       	ldi	r26, 0x35	; 53
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e3       	ldi	r30, 0x35	; 53
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_enu_ToggPin+0xd2>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_enu_ToggPin+0xce>
    1a78:	84 27       	eor	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	15 c0       	rjmp	.+42     	; 0x1aa8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    1a7e:	a2 e3       	ldi	r26, 0x32	; 50
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e2 e3       	ldi	r30, 0x32	; 50
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_enu_ToggPin+0xfa>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_enu_ToggPin+0xf6>
    1aa0:	84 27       	eor	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1aa6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01


}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <LCD_8_bit_init>:
 */

#include "LCD.h"

void LCD_8_bit_init (void) 		/* LCD 8-bit Mode Initialize function */
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	6c 97       	sbiw	r28, 0x1c	; 28
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61

	LCD_CMD_PORT_DIR = 0xFF;		/* Make LCD command port direction as o/p */
    1ace:	e4 e3       	ldi	r30, 0x34	; 52
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	80 83       	st	Z, r24
	LCD_DATA_PORT_DIR = 0xFF;		/* Make LCD data port direction as o/p */
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	80 83       	st	Z, r24
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ae4:	b1 e4       	ldi	r27, 0x41	; 65
    1ae6:	89 8f       	std	Y+25, r24	; 0x19
    1ae8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aea:	ab 8f       	std	Y+27, r26	; 0x1b
    1aec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	69 8d       	ldd	r22, Y+25	; 0x19
    1af0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a ef       	ldi	r20, 0xFA	; 250
    1afc:	54 e4       	ldi	r21, 0x44	; 68
    1afe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8d 8b       	std	Y+21, r24	; 0x15
    1b08:	9e 8b       	std	Y+22, r25	; 0x16
    1b0a:	af 8b       	std	Y+23, r26	; 0x17
    1b0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b10:	7e 89       	ldd	r23, Y+22	; 0x16
    1b12:	8f 89       	ldd	r24, Y+23	; 0x17
    1b14:	98 8d       	ldd	r25, Y+24	; 0x18
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <LCD_8_bit_init+0x76>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9c 8b       	std	Y+20, r25	; 0x14
    1b2c:	8b 8b       	std	Y+19, r24	; 0x13
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <LCD_8_bit_init+0xf4>
	else if (__tmp > 65535)
    1b30:	6d 89       	ldd	r22, Y+21	; 0x15
    1b32:	7e 89       	ldd	r23, Y+22	; 0x16
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	4c f5       	brge	.+82     	; 0x1b9a <LCD_8_bit_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <LCD_8_bit_init+0xd6>
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9a 8b       	std	Y+18, r25	; 0x12
    1b78:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b7a:	89 89       	ldd	r24, Y+17	; 0x11
    1b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_8_bit_init+0xc4>
    1b82:	9a 8b       	std	Y+18, r25	; 0x12
    1b84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9c 8b       	std	Y+20, r25	; 0x14
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8b 89       	ldd	r24, Y+19	; 0x13
    1b92:	9c 89       	ldd	r25, Y+20	; 0x14
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <LCD_8_bit_init+0xb8>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <LCD_8_bit_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9c 8b       	std	Y+20, r25	; 0x14
    1bac:	8b 8b       	std	Y+19, r24	; 0x13
    1bae:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb2:	98 8b       	std	Y+16, r25	; 0x10
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
    1bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb8:	98 89       	ldd	r25, Y+16	; 0x10
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_8_bit_init+0x100>
    1bbe:	98 8b       	std	Y+16, r25	; 0x10
    1bc0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);					/* LCD Power ON delay always >15ms */

	LCD_8_bit_sendCMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
    1bc2:	88 e3       	ldi	r24, 0x38	; 56
    1bc4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x0C);		/* Display ON Cursor OFF */
    1bc8:	8c e0       	ldi	r24, 0x0C	; 12
    1bca:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x06);		/* Auto Increment cursor */
    1bce:	86 e0       	ldi	r24, 0x06	; 6
    1bd0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x01);		/* clear display */
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e0       	ldi	r26, 0x00	; 0
    1be0:	b0 e4       	ldi	r27, 0x40	; 64
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a ef       	ldi	r20, 0xFA	; 250
    1bf8:	54 e4       	ldi	r21, 0x44	; 68
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_8_bit_init+0x172>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_8_bit_init+0x1f0>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_8_bit_init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_8_bit_init+0x1d2>
    1c6e:	88 ec       	ldi	r24, 0xC8	; 200
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_8_bit_init+0x1c0>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_8_bit_init+0x1b4>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_8_bit_init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_8_bit_init+0x1fc>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);					/* Clear display command delay> 1.63 ms */

	LCD_8_bit_sendCMD(0x80);		/* cursor at home position */
    1cbe:	80 e8       	ldi	r24, 0x80	; 128
    1cc0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>

}
    1cc4:	6c 96       	adiw	r28, 0x1c	; 28
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <LCD_8_bit_sendCMD>:

void LCD_8_bit_sendCMD (u8 cmnd)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	6d 97       	sbiw	r28, 0x1d	; 29
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = cmnd;
    1cec:	e8 e3       	ldi	r30, 0x38	; 56
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf2:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<RS);	/* RS=O command register */
    1cf4:	a5 e3       	ldi	r26, 0x35	; 53
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e5 e3       	ldi	r30, 0x35	; 53
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8d 7f       	andi	r24, 0xFD	; 253
    1d00:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    1d02:	a5 e3       	ldi	r26, 0x35	; 53
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e5 e3       	ldi	r30, 0x35	; 53
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8b 7f       	andi	r24, 0xFB	; 251
    1d0e:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    1d10:	a5 e3       	ldi	r26, 0x35	; 53
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e5 e3       	ldi	r30, 0x35	; 53
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	88 60       	ori	r24, 0x08	; 8
    1d1c:	8c 93       	st	X, r24
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a0 e8       	ldi	r26, 0x80	; 128
    1d24:	bf e3       	ldi	r27, 0x3F	; 63
    1d26:	89 8f       	std	Y+25, r24	; 0x19
    1d28:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a ef       	ldi	r20, 0xFA	; 250
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	8d 8b       	std	Y+21, r24	; 0x15
    1d48:	9e 8b       	std	Y+22, r25	; 0x16
    1d4a:	af 8b       	std	Y+23, r26	; 0x17
    1d4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d50:	7e 89       	ldd	r23, Y+22	; 0x16
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <LCD_8_bit_sendCMD+0x9a>
		__ticks = 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
    1d6e:	3f c0       	rjmp	.+126    	; 0x1dee <LCD_8_bit_sendCMD+0x118>
	else if (__tmp > 65535)
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	3f ef       	ldi	r19, 0xFF	; 255
    1d7c:	4f e7       	ldi	r20, 0x7F	; 127
    1d7e:	57 e4       	ldi	r21, 0x47	; 71
    1d80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d84:	18 16       	cp	r1, r24
    1d86:	4c f5       	brge	.+82     	; 0x1dda <LCD_8_bit_sendCMD+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d88:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e2       	ldi	r20, 0x20	; 32
    1d96:	51 e4       	ldi	r21, 0x41	; 65
    1d98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9c 8b       	std	Y+20, r25	; 0x14
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
    1db0:	0f c0       	rjmp	.+30     	; 0x1dd0 <LCD_8_bit_sendCMD+0xfa>
    1db2:	88 ec       	ldi	r24, 0xC8	; 200
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9a 8b       	std	Y+18, r25	; 0x12
    1db8:	89 8b       	std	Y+17, r24	; 0x11
    1dba:	89 89       	ldd	r24, Y+17	; 0x11
    1dbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_8_bit_sendCMD+0xe8>
    1dc2:	9a 8b       	std	Y+18, r25	; 0x12
    1dc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <LCD_8_bit_sendCMD+0xdc>
    1dd8:	14 c0       	rjmp	.+40     	; 0x1e02 <LCD_8_bit_sendCMD+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9c 8b       	std	Y+20, r25	; 0x14
    1dec:	8b 8b       	std	Y+19, r24	; 0x13
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	98 8b       	std	Y+16, r25	; 0x10
    1df4:	8f 87       	std	Y+15, r24	; 0x0f
    1df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df8:	98 89       	ldd	r25, Y+16	; 0x10
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_8_bit_sendCMD+0x124>
    1dfe:	98 8b       	std	Y+16, r25	; 0x10
    1e00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    1e02:	a5 e3       	ldi	r26, 0x35	; 53
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e5 e3       	ldi	r30, 0x35	; 53
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	87 7f       	andi	r24, 0xF7	; 247
    1e0e:	8c 93       	st	X, r24
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	a0 ea       	ldi	r26, 0xA0	; 160
    1e16:	b0 e4       	ldi	r27, 0x40	; 64
    1e18:	8b 87       	std	Y+11, r24	; 0x0b
    1e1a:	9c 87       	std	Y+12, r25	; 0x0c
    1e1c:	ad 87       	std	Y+13, r26	; 0x0d
    1e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	8f 83       	std	Y+7, r24	; 0x07
    1e3a:	98 87       	std	Y+8, r25	; 0x08
    1e3c:	a9 87       	std	Y+9, r26	; 0x09
    1e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e40:	6f 81       	ldd	r22, Y+7	; 0x07
    1e42:	78 85       	ldd	r23, Y+8	; 0x08
    1e44:	89 85       	ldd	r24, Y+9	; 0x09
    1e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e54:	88 23       	and	r24, r24
    1e56:	2c f4       	brge	.+10     	; 0x1e62 <LCD_8_bit_sendCMD+0x18c>
		__ticks = 1;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <LCD_8_bit_sendCMD+0x20a>
	else if (__tmp > 65535)
    1e62:	6f 81       	ldd	r22, Y+7	; 0x07
    1e64:	78 85       	ldd	r23, Y+8	; 0x08
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e76:	18 16       	cp	r1, r24
    1e78:	4c f5       	brge	.+82     	; 0x1ecc <LCD_8_bit_sendCMD+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_8_bit_sendCMD+0x1ec>
    1ea4:	88 ec       	ldi	r24, 0xC8	; 200
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	8b 83       	std	Y+3, r24	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_8_bit_sendCMD+0x1da>
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_8_bit_sendCMD+0x1ce>
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <LCD_8_bit_sendCMD+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <LCD_8_bit_sendCMD+0x216>
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    1ef4:	6d 96       	adiw	r28, 0x1d	; 29
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <LCD_8_bit_sendChar>:

void LCD_8_bit_sendChar (u8 charData)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	6d 97       	sbiw	r28, 0x1d	; 29
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = charData;
    1f1c:	e8 e3       	ldi	r30, 0x38	; 56
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f22:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<RS);	/* RS=1 data register */
    1f24:	a5 e3       	ldi	r26, 0x35	; 53
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e3       	ldi	r30, 0x35	; 53
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	82 60       	ori	r24, 0x02	; 2
    1f30:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    1f32:	a5 e3       	ldi	r26, 0x35	; 53
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e5 e3       	ldi	r30, 0x35	; 53
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8b 7f       	andi	r24, 0xFB	; 251
    1f3e:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    1f40:	a5 e3       	ldi	r26, 0x35	; 53
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e5 e3       	ldi	r30, 0x35	; 53
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 60       	ori	r24, 0x08	; 8
    1f4c:	8c 93       	st	X, r24
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e8       	ldi	r26, 0x80	; 128
    1f54:	bf e3       	ldi	r27, 0x3F	; 63
    1f56:	89 8f       	std	Y+25, r24	; 0x19
    1f58:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8d 8b       	std	Y+21, r24	; 0x15
    1f78:	9e 8b       	std	Y+22, r25	; 0x16
    1f7a:	af 8b       	std	Y+23, r26	; 0x17
    1f7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f80:	7e 89       	ldd	r23, Y+22	; 0x16
    1f82:	8f 89       	ldd	r24, Y+23	; 0x17
    1f84:	98 8d       	ldd	r25, Y+24	; 0x18
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_8_bit_sendChar+0x9a>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_8_bit_sendChar+0x118>
	else if (__tmp > 65535)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_8_bit_sendChar+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_8_bit_sendChar+0xfa>
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9a 8b       	std	Y+18, r25	; 0x12
    1fe8:	89 8b       	std	Y+17, r24	; 0x11
    1fea:	89 89       	ldd	r24, Y+17	; 0x11
    1fec:	9a 89       	ldd	r25, Y+18	; 0x12
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_8_bit_sendChar+0xe8>
    1ff2:	9a 8b       	std	Y+18, r25	; 0x12
    1ff4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8b 89       	ldd	r24, Y+19	; 0x13
    2002:	9c 89       	ldd	r25, Y+20	; 0x14
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_8_bit_sendChar+0xdc>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <LCD_8_bit_sendChar+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	98 8b       	std	Y+16, r25	; 0x10
    2024:	8f 87       	std	Y+15, r24	; 0x0f
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	98 89       	ldd	r25, Y+16	; 0x10
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_8_bit_sendChar+0x124>
    202e:	98 8b       	std	Y+16, r25	; 0x10
    2030:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    2032:	a5 e3       	ldi	r26, 0x35	; 53
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e5 e3       	ldi	r30, 0x35	; 53
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	87 7f       	andi	r24, 0xF7	; 247
    203e:	8c 93       	st	X, r24
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 ea       	ldi	r26, 0xA0	; 160
    2046:	b0 e4       	ldi	r27, 0x40	; 64
    2048:	8b 87       	std	Y+11, r24	; 0x0b
    204a:	9c 87       	std	Y+12, r25	; 0x0c
    204c:	ad 87       	std	Y+13, r26	; 0x0d
    204e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2050:	6b 85       	ldd	r22, Y+11	; 0x0b
    2052:	7c 85       	ldd	r23, Y+12	; 0x0c
    2054:	8d 85       	ldd	r24, Y+13	; 0x0d
    2056:	9e 85       	ldd	r25, Y+14	; 0x0e
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	8f 83       	std	Y+7, r24	; 0x07
    206a:	98 87       	std	Y+8, r25	; 0x08
    206c:	a9 87       	std	Y+9, r26	; 0x09
    206e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	2c f4       	brge	.+10     	; 0x2092 <LCD_8_bit_sendChar+0x18c>
		__ticks = 1;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <LCD_8_bit_sendChar+0x20a>
	else if (__tmp > 65535)
    2092:	6f 81       	ldd	r22, Y+7	; 0x07
    2094:	78 85       	ldd	r23, Y+8	; 0x08
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	3f ef       	ldi	r19, 0xFF	; 255
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	4c f5       	brge	.+82     	; 0x20fc <LCD_8_bit_sendChar+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <LCD_8_bit_sendChar+0x1ec>
    20d4:	88 ec       	ldi	r24, 0xC8	; 200
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_8_bit_sendChar+0x1da>
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	69 f7       	brne	.-38     	; 0x20d4 <LCD_8_bit_sendChar+0x1ce>
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <LCD_8_bit_sendChar+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_8_bit_sendChar+0x216>
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2124:	6d 96       	adiw	r28, 0x1d	; 29
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LCD_8_bit_sendString>:

void LCD_8_bit_sendString (u8 *str)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <LCD_8_bit_sendString+0x6>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9b 83       	std	Y+3, r25	; 0x03
    2144:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2146:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; str[i] != 0; i++)
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	0e c0       	rjmp	.+28     	; 0x2168 <LCD_8_bit_sendString+0x32>
	{
		LCD_8_bit_sendChar(str[i]);
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	80 81       	ld	r24, Z
    215e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_8_bit_sendChar>
}

void LCD_8_bit_sendString (u8 *str)
{
	u8 i = 0;
	for (i = 0; str[i] != 0; i++)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	80 81       	ld	r24, Z
    217a:	88 23       	and	r24, r24
    217c:	39 f7       	brne	.-50     	; 0x214c <LCD_8_bit_sendString+0x16>
	{
		LCD_8_bit_sendChar(str[i]);
	}
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <LCD_8_bit_GoToPos>:

void LCD_8_bit_GoToPos (u8 row, u8 col)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <LCD_8_bit_GoToPos+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <LCD_8_bit_GoToPos+0x8>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc[2] = {0x80 , 0xc0};
    219a:	80 e8       	ldi	r24, 0x80	; 128
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	80 ec       	ldi	r24, 0xC0	; 192
    21a0:	8a 83       	std	Y+2, r24	; 0x02
	LCD_8_bit_sendCMD(Loc[row]+col);
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	ce 01       	movw	r24, r28
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	90 81       	ld	r25, Z
    21b4:	8c 81       	ldd	r24, Y+4	; 0x04
    21b6:	89 0f       	add	r24, r25
    21b8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <LCD_createCustomCharacter>:

void LCD_createCustomCharacter (u8 *pattern, u8 location)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <LCD_createCustomCharacter+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <LCD_createCustomCharacter+0x8>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9b 83       	std	Y+3, r25	; 0x03
    21d8:	8a 83       	std	Y+2, r24	; 0x02
    21da:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    21dc:	19 82       	std	Y+1, r1	; 0x01

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	08 96       	adiw	r24, 0x08	; 8
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>

	for(i = 0; i < 8; i++)
    21f6:	19 82       	std	Y+1, r1	; 0x01
    21f8:	0e c0       	rjmp	.+28     	; 0x2216 <LCD_createCustomCharacter+0x4c>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	fc 01       	movw	r30, r24
    2206:	e2 0f       	add	r30, r18
    2208:	f3 1f       	adc	r31, r19
    220a:	80 81       	ld	r24, Z
    220c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_8_bit_sendChar>
{
	u8 i = 0;

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */

	for(i = 0; i < 8; i++)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	8f 5f       	subi	r24, 0xFF	; 255
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	88 30       	cpi	r24, 0x08	; 8
    221a:	78 f3       	brcs	.-34     	; 0x21fa <LCD_createCustomCharacter+0x30>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
	}
}
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <LCD_CLR>:

void LCD_CLR (void)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	LCD_8_bit_sendCMD(0X01);			/* clear display */
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0X80);			/* cursor at home position */
    2238:	80 e8       	ldi	r24, 0x80	; 128
    223a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_8_bit_sendCMD>
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	0f 92       	push	r0
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    224e:	19 82       	std	Y+1, r1	; 0x01
    2250:	33 c0       	rjmp	.+102    	; 0x22b8 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	fc 01       	movw	r30, r24
    225a:	e5 55       	subi	r30, 0x55	; 85
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	90 81       	ld	r25, Z
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	69 2f       	mov	r22, r25
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	fc 01       	movw	r30, r24
    2272:	e5 55       	subi	r30, 0x55	; 85
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	90 81       	ld	r25, Z
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	69 2f       	mov	r22, r25
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	fc 01       	movw	r30, r24
    228a:	e1 55       	subi	r30, 0x51	; 81
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	90 81       	ld	r25, Z
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	69 2f       	mov	r22, r25
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	fc 01       	movw	r30, r24
    22a2:	e1 55       	subi	r30, 0x51	; 81
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	90 81       	ld	r25, Z
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	69 2f       	mov	r22, r25
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	84 30       	cpi	r24, 0x04	; 4
    22bc:	50 f2       	brcs	.-108    	; 0x2252 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    22be:	81 e0       	ldi	r24, 0x01	; 1
}
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	65 97       	sbiw	r28, 0x15	; 21
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	9d 8b       	std	Y+21, r25	; 0x15
    22de:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	8a 8b       	std	Y+18, r24	; 0x12
    22e4:	1b 8a       	std	Y+19, r1	; 0x13
    22e6:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    22e8:	8c 89       	ldd	r24, Y+20	; 0x14
    22ea:	9d 89       	ldd	r25, Y+21	; 0x15
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <Keypad_enu_getKey+0x2a>
    22f0:	f0 c0       	rjmp	.+480    	; 0x24d2 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    22f2:	ec 89       	ldd	r30, Y+20	; 0x14
    22f4:	fd 89       	ldd	r31, Y+21	; 0x15
    22f6:	8f ef       	ldi	r24, 0xFF	; 255
    22f8:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    22fa:	19 8a       	std	Y+17, r1	; 0x11
    22fc:	e5 c0       	rjmp	.+458    	; 0x24c8 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    22fe:	89 89       	ldd	r24, Y+17	; 0x11
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	fc 01       	movw	r30, r24
    2306:	e5 55       	subi	r30, 0x55	; 85
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	90 81       	ld	r25, Z
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	69 2f       	mov	r22, r25
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2316:	18 8a       	std	Y+16, r1	; 0x10
    2318:	c1 c0       	rjmp	.+386    	; 0x249c <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    231a:	88 89       	ldd	r24, Y+16	; 0x10
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	fc 01       	movw	r30, r24
    2322:	e1 55       	subi	r30, 0x51	; 81
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	90 81       	ld	r25, Z
    2328:	9e 01       	movw	r18, r28
    232a:	2d 5e       	subi	r18, 0xED	; 237
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	83 e0       	ldi	r24, 0x03	; 3
    2330:	69 2f       	mov	r22, r25
    2332:	a9 01       	movw	r20, r18
    2334:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2338:	8b 89       	ldd	r24, Y+19	; 0x13
    233a:	88 23       	and	r24, r24
    233c:	09 f0       	breq	.+2      	; 0x2340 <Keypad_enu_getKey+0x78>
    233e:	ab c0       	rjmp	.+342    	; 0x2496 <Keypad_enu_getKey+0x1ce>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 ea       	ldi	r26, 0xA0	; 160
    2346:	b1 e4       	ldi	r27, 0x41	; 65
    2348:	8b 87       	std	Y+11, r24	; 0x0b
    234a:	9c 87       	std	Y+12, r25	; 0x0c
    234c:	ad 87       	std	Y+13, r26	; 0x0d
    234e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a e7       	ldi	r20, 0x7A	; 122
    235e:	55 e4       	ldi	r21, 0x45	; 69
    2360:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8f 83       	std	Y+7, r24	; 0x07
    236a:	98 87       	std	Y+8, r25	; 0x08
    236c:	a9 87       	std	Y+9, r26	; 0x09
    236e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	3f ef       	ldi	r19, 0xFF	; 255
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	57 e4       	ldi	r21, 0x47	; 71
    23a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	4c f5       	brge	.+82     	; 0x23fc <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e2       	ldi	r20, 0x20	; 32
    23b8:	51 e4       	ldi	r21, 0x41	; 65
    23ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <Keypad_enu_getKey+0x12a>
    23d4:	80 e9       	ldi	r24, 0x90	; 144
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	8b 83       	std	Y+3, r24	; 0x03
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <Keypad_enu_getKey+0x118>
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <Keypad_enu_getKey+0x10c>
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	9a 83       	std	Y+2, r25	; 0x02
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <Keypad_enu_getKey+0x154>
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2424:	88 89       	ldd	r24, Y+16	; 0x10
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	fc 01       	movw	r30, r24
    242c:	e1 55       	subi	r30, 0x51	; 81
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	90 81       	ld	r25, Z
    2432:	9e 01       	movw	r18, r28
    2434:	2d 5e       	subi	r18, 0xED	; 237
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	69 2f       	mov	r22, r25
    243c:	a9 01       	movw	r20, r18
    243e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_enu_GetPinValue>
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2444:	88 89       	ldd	r24, Y+16	; 0x10
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	fc 01       	movw	r30, r24
    244c:	e1 55       	subi	r30, 0x51	; 81
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	90 81       	ld	r25, Z
    2452:	9e 01       	movw	r18, r28
    2454:	2d 5e       	subi	r18, 0xED	; 237
    2456:	3f 4f       	sbci	r19, 0xFF	; 255
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	69 2f       	mov	r22, r25
    245c:	a9 01       	movw	r20, r18
    245e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	88 23       	and	r24, r24
    2466:	71 f3       	breq	.-36     	; 0x2444 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2468:	89 89       	ldd	r24, Y+17	; 0x11
    246a:	48 2f       	mov	r20, r24
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	88 89       	ldd	r24, Y+16	; 0x10
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	ca 01       	movw	r24, r20
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	fc 01       	movw	r30, r24
    2484:	e5 56       	subi	r30, 0x65	; 101
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	ec 89       	ldd	r30, Y+20	; 0x14
    248c:	fd 89       	ldd	r31, Y+21	; 0x15
    248e:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	8f 87       	std	Y+15, r24	; 0x0f
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2496:	88 89       	ldd	r24, Y+16	; 0x10
    2498:	8f 5f       	subi	r24, 0xFF	; 255
    249a:	88 8b       	std	Y+16, r24	; 0x10
    249c:	88 89       	ldd	r24, Y+16	; 0x10
    249e:	84 30       	cpi	r24, 0x04	; 4
    24a0:	08 f4       	brcc	.+2      	; 0x24a4 <Keypad_enu_getKey+0x1dc>
    24a2:	3b cf       	rjmp	.-394    	; 0x231a <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	fc 01       	movw	r30, r24
    24ac:	e5 55       	subi	r30, 0x55	; 85
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	90 81       	ld	r25, Z
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	69 2f       	mov	r22, r25
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    24bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24be:	88 23       	and	r24, r24
    24c0:	49 f4       	brne	.+18     	; 0x24d4 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    24c2:	89 89       	ldd	r24, Y+17	; 0x11
    24c4:	8f 5f       	subi	r24, 0xFF	; 255
    24c6:	89 8b       	std	Y+17, r24	; 0x11
    24c8:	89 89       	ldd	r24, Y+17	; 0x11
    24ca:	84 30       	cpi	r24, 0x04	; 4
    24cc:	08 f4       	brcc	.+2      	; 0x24d0 <Keypad_enu_getKey+0x208>
    24ce:	17 cf       	rjmp	.-466    	; 0x22fe <Keypad_enu_getKey+0x36>
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    24d2:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    24d4:	8a 89       	ldd	r24, Y+18	; 0x12
}
    24d6:	65 96       	adiw	r28, 0x15	; 21
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <main>:
#include "main.h"

int main() {
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	ad 97       	sbiw	r28, 0x2d	; 45
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    /* Initializations */
	LCD_8_bit_init();
    2504:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <LCD_8_bit_init>
    Keypad_enu_Init();
    2508:	0e 94 22 11 	call	0x2244	; 0x2244 <Keypad_enu_Init>

    /* Variables Declarations */
    u8 key;
    u8 counter = 0;
    250c:	1a 82       	std	Y+2, r1	; 0x02
    while (1) {

        u8 operator = '\0';
    250e:	19 82       	std	Y+1, r1	; 0x01
        u8 num1[10] = {0};
    2510:	8a e0       	ldi	r24, 0x0A	; 10
    2512:	fe 01       	movw	r30, r28
    2514:	34 96       	adiw	r30, 0x04	; 4
    2516:	df 01       	movw	r26, r30
    2518:	28 2f       	mov	r18, r24
    251a:	1d 92       	st	X+, r1
    251c:	2a 95       	dec	r18
    251e:	e9 f7       	brne	.-6      	; 0x251a <main+0x32>
        u8 num2[10] = {0};
    2520:	8a e0       	ldi	r24, 0x0A	; 10
    2522:	fe 01       	movw	r30, r28
    2524:	3e 96       	adiw	r30, 0x0e	; 14
    2526:	df 01       	movw	r26, r30
    2528:	28 2f       	mov	r18, r24
    252a:	1d 92       	st	X+, r1
    252c:	2a 95       	dec	r18
    252e:	e9 f7       	brne	.-6      	; 0x252a <main+0x42>
        u16 result[10] = {0};
    2530:	84 e1       	ldi	r24, 0x14	; 20
    2532:	fe 01       	movw	r30, r28
    2534:	78 96       	adiw	r30, 0x18	; 24
    2536:	df 01       	movw	r26, r30
    2538:	28 2f       	mov	r18, r24
    253a:	1d 92       	st	X+, r1
    253c:	2a 95       	dec	r18
    253e:	e9 f7       	brne	.-6      	; 0x253a <main+0x52>
    2540:	2d c0       	rjmp	.+90     	; 0x259c <main+0xb4>

        while (key != '+' && key != '-' && key != '*' && key != '/' && key != '=') {
            if (Keypad_enu_getKey(&key) == STATE_OK) {
    2542:	ce 01       	movw	r24, r28
    2544:	03 96       	adiw	r24, 0x03	; 3
    2546:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Keypad_enu_getKey>
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	39 f5       	brne	.+78     	; 0x259c <main+0xb4>
                if (key != KEYPAD_U8_NO_KEY_PRESSED) {
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	8f 3f       	cpi	r24, 0xFF	; 255
    2552:	21 f1       	breq	.+72     	; 0x259c <main+0xb4>
                	if (key != '+' && key != '-' && key != '*' && key != '/' && key != '='){
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	8b 32       	cpi	r24, 0x2B	; 43
    2558:	f1 f0       	breq	.+60     	; 0x2596 <main+0xae>
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	8d 32       	cpi	r24, 0x2D	; 45
    255e:	d9 f0       	breq	.+54     	; 0x2596 <main+0xae>
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	8a 32       	cpi	r24, 0x2A	; 42
    2564:	c1 f0       	breq	.+48     	; 0x2596 <main+0xae>
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	8f 32       	cpi	r24, 0x2F	; 47
    256a:	a9 f0       	breq	.+42     	; 0x2596 <main+0xae>
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	8d 33       	cpi	r24, 0x3D	; 61
    2570:	91 f0       	breq	.+36     	; 0x2596 <main+0xae>
                		 num1[counter++] = key;
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4b 81       	ldd	r20, Y+3	; 0x03
    257a:	ce 01       	movw	r24, r28
    257c:	04 96       	adiw	r24, 0x04	; 4
    257e:	fc 01       	movw	r30, r24
    2580:	e2 0f       	add	r30, r18
    2582:	f3 1f       	adc	r31, r19
    2584:	40 83       	st	Z, r20
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	8a 83       	std	Y+2, r24	; 0x02
                		 if(counter == 1){
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	81 30       	cpi	r24, 0x01	; 1
    2590:	11 f4       	brne	.+4      	; 0x2596 <main+0xae>
                			 LCD_CLR();
    2592:	0e 94 15 11 	call	0x222a	; 0x222a <LCD_CLR>
						 }
                	}
                	LCD_8_bit_sendChar(key);
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_8_bit_sendChar>
        u8 operator = '\0';
        u8 num1[10] = {0};
        u8 num2[10] = {0};
        u16 result[10] = {0};

        while (key != '+' && key != '-' && key != '*' && key != '/' && key != '=') {
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	8b 32       	cpi	r24, 0x2B	; 43
    25a0:	61 f0       	breq	.+24     	; 0x25ba <main+0xd2>
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	8d 32       	cpi	r24, 0x2D	; 45
    25a6:	49 f0       	breq	.+18     	; 0x25ba <main+0xd2>
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	8a 32       	cpi	r24, 0x2A	; 42
    25ac:	31 f0       	breq	.+12     	; 0x25ba <main+0xd2>
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	8f 32       	cpi	r24, 0x2F	; 47
    25b2:	19 f0       	breq	.+6      	; 0x25ba <main+0xd2>
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	8d 33       	cpi	r24, 0x3D	; 61
    25b8:	21 f6       	brne	.-120    	; 0x2542 <main+0x5a>
                }
            }

        }

        operator = key;
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	89 83       	std	Y+1, r24	; 0x01
        key = KEYPAD_U8_NO_KEY_PRESSED;
    25be:	8f ef       	ldi	r24, 0xFF	; 255
    25c0:	8b 83       	std	Y+3, r24	; 0x03
        counter = 0;
    25c2:	1a 82       	std	Y+2, r1	; 0x02
    25c4:	28 c0       	rjmp	.+80     	; 0x2616 <main+0x12e>

        while (key != '+' && key != '-' && key != '*' && key != '/' && key != '=') {
            if (Keypad_enu_getKey(&key) == STATE_OK) {
    25c6:	ce 01       	movw	r24, r28
    25c8:	03 96       	adiw	r24, 0x03	; 3
    25ca:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Keypad_enu_getKey>
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	11 f5       	brne	.+68     	; 0x2616 <main+0x12e>
                if (key != KEYPAD_U8_NO_KEY_PRESSED) {
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	8f 3f       	cpi	r24, 0xFF	; 255
    25d6:	f9 f0       	breq	.+62     	; 0x2616 <main+0x12e>
                	LCD_8_bit_sendChar(key);
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_8_bit_sendChar>
                	if (key != '+' && key != '-' && key != '*' && key != '/' && key != '='){
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	8b 32       	cpi	r24, 0x2B	; 43
    25e2:	c9 f0       	breq	.+50     	; 0x2616 <main+0x12e>
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	8d 32       	cpi	r24, 0x2D	; 45
    25e8:	b1 f0       	breq	.+44     	; 0x2616 <main+0x12e>
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	8a 32       	cpi	r24, 0x2A	; 42
    25ee:	99 f0       	breq	.+38     	; 0x2616 <main+0x12e>
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	8f 32       	cpi	r24, 0x2F	; 47
    25f4:	81 f0       	breq	.+32     	; 0x2616 <main+0x12e>
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	8d 33       	cpi	r24, 0x3D	; 61
    25fa:	69 f0       	breq	.+26     	; 0x2616 <main+0x12e>
                		 num2[counter++] = key;
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4b 81       	ldd	r20, Y+3	; 0x03
    2604:	ce 01       	movw	r24, r28
    2606:	0e 96       	adiw	r24, 0x0e	; 14
    2608:	fc 01       	movw	r30, r24
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	40 83       	st	Z, r20
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	8a 83       	std	Y+2, r24	; 0x02

        operator = key;
        key = KEYPAD_U8_NO_KEY_PRESSED;
        counter = 0;

        while (key != '+' && key != '-' && key != '*' && key != '/' && key != '=') {
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	8b 32       	cpi	r24, 0x2B	; 43
    261a:	61 f0       	breq	.+24     	; 0x2634 <main+0x14c>
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	8d 32       	cpi	r24, 0x2D	; 45
    2620:	49 f0       	breq	.+18     	; 0x2634 <main+0x14c>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	8a 32       	cpi	r24, 0x2A	; 42
    2626:	31 f0       	breq	.+12     	; 0x2634 <main+0x14c>
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	8f 32       	cpi	r24, 0x2F	; 47
    262c:	19 f0       	breq	.+6      	; 0x2634 <main+0x14c>
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	8d 33       	cpi	r24, 0x3D	; 61
    2632:	49 f6       	brne	.-110    	; 0x25c6 <main+0xde>
                }
            }

        }

		switch (operator) {
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	a8 2f       	mov	r26, r24
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	bd a7       	std	Y+45, r27	; 0x2d
    263c:	ac a7       	std	Y+44, r26	; 0x2c
    263e:	2c a5       	ldd	r18, Y+44	; 0x2c
    2640:	3d a5       	ldd	r19, Y+45	; 0x2d
    2642:	2b 32       	cpi	r18, 0x2B	; 43
    2644:	31 05       	cpc	r19, r1
    2646:	c1 f0       	breq	.+48     	; 0x2678 <main+0x190>
    2648:	8c a5       	ldd	r24, Y+44	; 0x2c
    264a:	9d a5       	ldd	r25, Y+45	; 0x2d
    264c:	8c 32       	cpi	r24, 0x2C	; 44
    264e:	91 05       	cpc	r25, r1
    2650:	3c f4       	brge	.+14     	; 0x2660 <main+0x178>
    2652:	ac a5       	ldd	r26, Y+44	; 0x2c
    2654:	bd a5       	ldd	r27, Y+45	; 0x2d
    2656:	aa 32       	cpi	r26, 0x2A	; 42
    2658:	b1 05       	cpc	r27, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <main+0x176>
    265c:	66 c0       	rjmp	.+204    	; 0x272a <main+0x242>
    265e:	d5 c0       	rjmp	.+426    	; 0x280a <main+0x322>
    2660:	2c a5       	ldd	r18, Y+44	; 0x2c
    2662:	3d a5       	ldd	r19, Y+45	; 0x2d
    2664:	2d 32       	cpi	r18, 0x2D	; 45
    2666:	31 05       	cpc	r19, r1
    2668:	99 f1       	breq	.+102    	; 0x26d0 <main+0x1e8>
    266a:	8c a5       	ldd	r24, Y+44	; 0x2c
    266c:	9d a5       	ldd	r25, Y+45	; 0x2d
    266e:	8f 32       	cpi	r24, 0x2F	; 47
    2670:	91 05       	cpc	r25, r1
    2672:	09 f4       	brne	.+2      	; 0x2676 <main+0x18e>
    2674:	8a c0       	rjmp	.+276    	; 0x278a <main+0x2a2>
    2676:	c9 c0       	rjmp	.+402    	; 0x280a <main+0x322>
			case '+':
				sprintf(result, "%i", atoi(num1) + atoi(num2));
    2678:	0f 2e       	mov	r0, r31
    267a:	f8 e1       	ldi	r31, 0x18	; 24
    267c:	ef 2e       	mov	r14, r31
    267e:	ff 24       	eor	r15, r15
    2680:	f0 2d       	mov	r31, r0
    2682:	ec 0e       	add	r14, r28
    2684:	fd 1e       	adc	r15, r29
    2686:	ce 01       	movw	r24, r28
    2688:	04 96       	adiw	r24, 0x04	; 4
    268a:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    268e:	8c 01       	movw	r16, r24
    2690:	ce 01       	movw	r24, r28
    2692:	0e 96       	adiw	r24, 0x0e	; 14
    2694:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    2698:	98 01       	movw	r18, r16
    269a:	28 0f       	add	r18, r24
    269c:	39 1f       	adc	r19, r25
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <main+0x1b8>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <main+0x1ba>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <main+0x1bc>
    26a4:	ed b7       	in	r30, 0x3d	; 61
    26a6:	fe b7       	in	r31, 0x3e	; 62
    26a8:	31 96       	adiw	r30, 0x01	; 1
    26aa:	f1 82       	std	Z+1, r15	; 0x01
    26ac:	e0 82       	st	Z, r14
    26ae:	80 e6       	ldi	r24, 0x60	; 96
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	93 83       	std	Z+3, r25	; 0x03
    26b4:	82 83       	std	Z+2, r24	; 0x02
    26b6:	35 83       	std	Z+5, r19	; 0x05
    26b8:	24 83       	std	Z+4, r18	; 0x04
    26ba:	0e 94 a5 14 	call	0x294a	; 0x294a <sprintf>
    26be:	ad b7       	in	r26, 0x3d	; 61
    26c0:	be b7       	in	r27, 0x3e	; 62
    26c2:	16 96       	adiw	r26, 0x06	; 6
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	be bf       	out	0x3e, r27	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	ad bf       	out	0x3d, r26	; 61
    26ce:	a6 c0       	rjmp	.+332    	; 0x281c <main+0x334>
				break;
			case '-':
				sprintf(result, "%i", atoi(num1) - atoi(num2));
    26d0:	0f 2e       	mov	r0, r31
    26d2:	f8 e1       	ldi	r31, 0x18	; 24
    26d4:	ef 2e       	mov	r14, r31
    26d6:	ff 24       	eor	r15, r15
    26d8:	f0 2d       	mov	r31, r0
    26da:	ec 0e       	add	r14, r28
    26dc:	fd 1e       	adc	r15, r29
    26de:	ce 01       	movw	r24, r28
    26e0:	04 96       	adiw	r24, 0x04	; 4
    26e2:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    26e6:	8c 01       	movw	r16, r24
    26e8:	ce 01       	movw	r24, r28
    26ea:	0e 96       	adiw	r24, 0x0e	; 14
    26ec:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    26f0:	98 01       	movw	r18, r16
    26f2:	28 1b       	sub	r18, r24
    26f4:	39 0b       	sbc	r19, r25
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <main+0x210>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <main+0x212>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <main+0x214>
    26fc:	ed b7       	in	r30, 0x3d	; 61
    26fe:	fe b7       	in	r31, 0x3e	; 62
    2700:	31 96       	adiw	r30, 0x01	; 1
    2702:	f1 82       	std	Z+1, r15	; 0x01
    2704:	e0 82       	st	Z, r14
    2706:	80 e6       	ldi	r24, 0x60	; 96
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	93 83       	std	Z+3, r25	; 0x03
    270c:	82 83       	std	Z+2, r24	; 0x02
    270e:	35 83       	std	Z+5, r19	; 0x05
    2710:	24 83       	std	Z+4, r18	; 0x04
    2712:	0e 94 a5 14 	call	0x294a	; 0x294a <sprintf>
    2716:	2d b7       	in	r18, 0x3d	; 61
    2718:	3e b7       	in	r19, 0x3e	; 62
    271a:	2a 5f       	subi	r18, 0xFA	; 250
    271c:	3f 4f       	sbci	r19, 0xFF	; 255
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	3e bf       	out	0x3e, r19	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	2d bf       	out	0x3d, r18	; 61
    2728:	79 c0       	rjmp	.+242    	; 0x281c <main+0x334>
				break;
			case '*':
				sprintf(result, "%i", atoi(num1) * atoi(num2));
    272a:	0f 2e       	mov	r0, r31
    272c:	f8 e1       	ldi	r31, 0x18	; 24
    272e:	ef 2e       	mov	r14, r31
    2730:	ff 24       	eor	r15, r15
    2732:	f0 2d       	mov	r31, r0
    2734:	ec 0e       	add	r14, r28
    2736:	fd 1e       	adc	r15, r29
    2738:	ce 01       	movw	r24, r28
    273a:	04 96       	adiw	r24, 0x04	; 4
    273c:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    2740:	8c 01       	movw	r16, r24
    2742:	ce 01       	movw	r24, r28
    2744:	0e 96       	adiw	r24, 0x0e	; 14
    2746:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    274a:	08 9f       	mul	r16, r24
    274c:	90 01       	movw	r18, r0
    274e:	09 9f       	mul	r16, r25
    2750:	30 0d       	add	r19, r0
    2752:	18 9f       	mul	r17, r24
    2754:	30 0d       	add	r19, r0
    2756:	11 24       	eor	r1, r1
    2758:	00 d0       	rcall	.+0      	; 0x275a <main+0x272>
    275a:	00 d0       	rcall	.+0      	; 0x275c <main+0x274>
    275c:	00 d0       	rcall	.+0      	; 0x275e <main+0x276>
    275e:	ed b7       	in	r30, 0x3d	; 61
    2760:	fe b7       	in	r31, 0x3e	; 62
    2762:	31 96       	adiw	r30, 0x01	; 1
    2764:	f1 82       	std	Z+1, r15	; 0x01
    2766:	e0 82       	st	Z, r14
    2768:	80 e6       	ldi	r24, 0x60	; 96
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	93 83       	std	Z+3, r25	; 0x03
    276e:	82 83       	std	Z+2, r24	; 0x02
    2770:	35 83       	std	Z+5, r19	; 0x05
    2772:	24 83       	std	Z+4, r18	; 0x04
    2774:	0e 94 a5 14 	call	0x294a	; 0x294a <sprintf>
    2778:	8d b7       	in	r24, 0x3d	; 61
    277a:	9e b7       	in	r25, 0x3e	; 62
    277c:	06 96       	adiw	r24, 0x06	; 6
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	9e bf       	out	0x3e, r25	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	8d bf       	out	0x3d, r24	; 61
    2788:	49 c0       	rjmp	.+146    	; 0x281c <main+0x334>
				break;
			case '/':
				if (atoi(num2) != 0) {
    278a:	ce 01       	movw	r24, r28
    278c:	0e 96       	adiw	r24, 0x0e	; 14
    278e:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    2792:	00 97       	sbiw	r24, 0x00	; 0
    2794:	81 f1       	breq	.+96     	; 0x27f6 <main+0x30e>
					sprintf(result, "%i", atoi(num1) / atoi(num2));
    2796:	0f 2e       	mov	r0, r31
    2798:	f8 e1       	ldi	r31, 0x18	; 24
    279a:	ef 2e       	mov	r14, r31
    279c:	ff 24       	eor	r15, r15
    279e:	f0 2d       	mov	r31, r0
    27a0:	ec 0e       	add	r14, r28
    27a2:	fd 1e       	adc	r15, r29
    27a4:	ce 01       	movw	r24, r28
    27a6:	04 96       	adiw	r24, 0x04	; 4
    27a8:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    27ac:	8c 01       	movw	r16, r24
    27ae:	ce 01       	movw	r24, r28
    27b0:	0e 96       	adiw	r24, 0x0e	; 14
    27b2:	0e 94 76 14 	call	0x28ec	; 0x28ec <atoi>
    27b6:	9c 01       	movw	r18, r24
    27b8:	c8 01       	movw	r24, r16
    27ba:	b9 01       	movw	r22, r18
    27bc:	0e 94 18 14 	call	0x2830	; 0x2830 <__divmodhi4>
    27c0:	cb 01       	movw	r24, r22
    27c2:	9c 01       	movw	r18, r24
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <main+0x2de>
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <main+0x2e0>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <main+0x2e2>
    27ca:	ed b7       	in	r30, 0x3d	; 61
    27cc:	fe b7       	in	r31, 0x3e	; 62
    27ce:	31 96       	adiw	r30, 0x01	; 1
    27d0:	f1 82       	std	Z+1, r15	; 0x01
    27d2:	e0 82       	st	Z, r14
    27d4:	80 e6       	ldi	r24, 0x60	; 96
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	93 83       	std	Z+3, r25	; 0x03
    27da:	82 83       	std	Z+2, r24	; 0x02
    27dc:	35 83       	std	Z+5, r19	; 0x05
    27de:	24 83       	std	Z+4, r18	; 0x04
    27e0:	0e 94 a5 14 	call	0x294a	; 0x294a <sprintf>
    27e4:	ad b7       	in	r26, 0x3d	; 61
    27e6:	be b7       	in	r27, 0x3e	; 62
    27e8:	16 96       	adiw	r26, 0x06	; 6
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	be bf       	out	0x3e, r27	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	ad bf       	out	0x3d, r26	; 61
    27f4:	13 c0       	rjmp	.+38     	; 0x281c <main+0x334>
				} else {
					strcpy(result, "Error: Division by zero");
    27f6:	ce 01       	movw	r24, r28
    27f8:	48 96       	adiw	r24, 0x18	; 24
    27fa:	23 e6       	ldi	r18, 0x63	; 99
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	b9 01       	movw	r22, r18
    2800:	48 e1       	ldi	r20, 0x18	; 24
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	0e 94 94 14 	call	0x2928	; 0x2928 <memcpy>
    2808:	09 c0       	rjmp	.+18     	; 0x281c <main+0x334>
				}
				 break;
			default:
				strcpy(result, "Error: Invalid operator");
    280a:	ce 01       	movw	r24, r28
    280c:	48 96       	adiw	r24, 0x18	; 24
    280e:	2b e7       	ldi	r18, 0x7B	; 123
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	b9 01       	movw	r22, r18
    2814:	48 e1       	ldi	r20, 0x18	; 24
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	0e 94 94 14 	call	0x2928	; 0x2928 <memcpy>
				break;
		}

		LCD_CLR();
    281c:	0e 94 15 11 	call	0x222a	; 0x222a <LCD_CLR>
		LCD_8_bit_sendString(result);
    2820:	ce 01       	movw	r24, r28
    2822:	48 96       	adiw	r24, 0x18	; 24
    2824:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_8_bit_sendString>
		key = KEYPAD_U8_NO_KEY_PRESSED;
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	8b 83       	std	Y+3, r24	; 0x03
		counter = 0;
    282c:	1a 82       	std	Y+2, r1	; 0x02
    282e:	6f ce       	rjmp	.-802    	; 0x250e <main+0x26>

00002830 <__divmodhi4>:
    2830:	97 fb       	bst	r25, 7
    2832:	09 2e       	mov	r0, r25
    2834:	07 26       	eor	r0, r23
    2836:	0a d0       	rcall	.+20     	; 0x284c <__divmodhi4_neg1>
    2838:	77 fd       	sbrc	r23, 7
    283a:	04 d0       	rcall	.+8      	; 0x2844 <__divmodhi4_neg2>
    283c:	0c d0       	rcall	.+24     	; 0x2856 <__udivmodhi4>
    283e:	06 d0       	rcall	.+12     	; 0x284c <__divmodhi4_neg1>
    2840:	00 20       	and	r0, r0
    2842:	1a f4       	brpl	.+6      	; 0x284a <__divmodhi4_exit>

00002844 <__divmodhi4_neg2>:
    2844:	70 95       	com	r23
    2846:	61 95       	neg	r22
    2848:	7f 4f       	sbci	r23, 0xFF	; 255

0000284a <__divmodhi4_exit>:
    284a:	08 95       	ret

0000284c <__divmodhi4_neg1>:
    284c:	f6 f7       	brtc	.-4      	; 0x284a <__divmodhi4_exit>
    284e:	90 95       	com	r25
    2850:	81 95       	neg	r24
    2852:	9f 4f       	sbci	r25, 0xFF	; 255
    2854:	08 95       	ret

00002856 <__udivmodhi4>:
    2856:	aa 1b       	sub	r26, r26
    2858:	bb 1b       	sub	r27, r27
    285a:	51 e1       	ldi	r21, 0x11	; 17
    285c:	07 c0       	rjmp	.+14     	; 0x286c <__udivmodhi4_ep>

0000285e <__udivmodhi4_loop>:
    285e:	aa 1f       	adc	r26, r26
    2860:	bb 1f       	adc	r27, r27
    2862:	a6 17       	cp	r26, r22
    2864:	b7 07       	cpc	r27, r23
    2866:	10 f0       	brcs	.+4      	; 0x286c <__udivmodhi4_ep>
    2868:	a6 1b       	sub	r26, r22
    286a:	b7 0b       	sbc	r27, r23

0000286c <__udivmodhi4_ep>:
    286c:	88 1f       	adc	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	5a 95       	dec	r21
    2872:	a9 f7       	brne	.-22     	; 0x285e <__udivmodhi4_loop>
    2874:	80 95       	com	r24
    2876:	90 95       	com	r25
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	08 95       	ret

0000287e <__prologue_saves__>:
    287e:	2f 92       	push	r2
    2880:	3f 92       	push	r3
    2882:	4f 92       	push	r4
    2884:	5f 92       	push	r5
    2886:	6f 92       	push	r6
    2888:	7f 92       	push	r7
    288a:	8f 92       	push	r8
    288c:	9f 92       	push	r9
    288e:	af 92       	push	r10
    2890:	bf 92       	push	r11
    2892:	cf 92       	push	r12
    2894:	df 92       	push	r13
    2896:	ef 92       	push	r14
    2898:	ff 92       	push	r15
    289a:	0f 93       	push	r16
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	ca 1b       	sub	r28, r26
    28a8:	db 0b       	sbc	r29, r27
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	09 94       	ijmp

000028b6 <__epilogue_restores__>:
    28b6:	2a 88       	ldd	r2, Y+18	; 0x12
    28b8:	39 88       	ldd	r3, Y+17	; 0x11
    28ba:	48 88       	ldd	r4, Y+16	; 0x10
    28bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    28be:	6e 84       	ldd	r6, Y+14	; 0x0e
    28c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c8:	b9 84       	ldd	r11, Y+9	; 0x09
    28ca:	c8 84       	ldd	r12, Y+8	; 0x08
    28cc:	df 80       	ldd	r13, Y+7	; 0x07
    28ce:	ee 80       	ldd	r14, Y+6	; 0x06
    28d0:	fd 80       	ldd	r15, Y+5	; 0x05
    28d2:	0c 81       	ldd	r16, Y+4	; 0x04
    28d4:	1b 81       	ldd	r17, Y+3	; 0x03
    28d6:	aa 81       	ldd	r26, Y+2	; 0x02
    28d8:	b9 81       	ldd	r27, Y+1	; 0x01
    28da:	ce 0f       	add	r28, r30
    28dc:	d1 1d       	adc	r29, r1
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	ed 01       	movw	r28, r26
    28ea:	08 95       	ret

000028ec <atoi>:
    28ec:	fc 01       	movw	r30, r24
    28ee:	88 27       	eor	r24, r24
    28f0:	99 27       	eor	r25, r25
    28f2:	e8 94       	clt
    28f4:	21 91       	ld	r18, Z+
    28f6:	20 32       	cpi	r18, 0x20	; 32
    28f8:	e9 f3       	breq	.-6      	; 0x28f4 <atoi+0x8>
    28fa:	29 30       	cpi	r18, 0x09	; 9
    28fc:	10 f0       	brcs	.+4      	; 0x2902 <atoi+0x16>
    28fe:	2e 30       	cpi	r18, 0x0E	; 14
    2900:	c8 f3       	brcs	.-14     	; 0x28f4 <atoi+0x8>
    2902:	2b 32       	cpi	r18, 0x2B	; 43
    2904:	41 f0       	breq	.+16     	; 0x2916 <atoi+0x2a>
    2906:	2d 32       	cpi	r18, 0x2D	; 45
    2908:	39 f4       	brne	.+14     	; 0x2918 <atoi+0x2c>
    290a:	68 94       	set
    290c:	04 c0       	rjmp	.+8      	; 0x2916 <atoi+0x2a>
    290e:	0e 94 9d 14 	call	0x293a	; 0x293a <__mulhi_const_10>
    2912:	82 0f       	add	r24, r18
    2914:	91 1d       	adc	r25, r1
    2916:	21 91       	ld	r18, Z+
    2918:	20 53       	subi	r18, 0x30	; 48
    291a:	2a 30       	cpi	r18, 0x0A	; 10
    291c:	c0 f3       	brcs	.-16     	; 0x290e <atoi+0x22>
    291e:	1e f4       	brtc	.+6      	; 0x2926 <atoi+0x3a>
    2920:	90 95       	com	r25
    2922:	81 95       	neg	r24
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	08 95       	ret

00002928 <memcpy>:
    2928:	fb 01       	movw	r30, r22
    292a:	dc 01       	movw	r26, r24
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <memcpy+0xa>
    292e:	01 90       	ld	r0, Z+
    2930:	0d 92       	st	X+, r0
    2932:	41 50       	subi	r20, 0x01	; 1
    2934:	50 40       	sbci	r21, 0x00	; 0
    2936:	d8 f7       	brcc	.-10     	; 0x292e <memcpy+0x6>
    2938:	08 95       	ret

0000293a <__mulhi_const_10>:
    293a:	7a e0       	ldi	r23, 0x0A	; 10
    293c:	97 9f       	mul	r25, r23
    293e:	90 2d       	mov	r25, r0
    2940:	87 9f       	mul	r24, r23
    2942:	80 2d       	mov	r24, r0
    2944:	91 0d       	add	r25, r1
    2946:	11 24       	eor	r1, r1
    2948:	08 95       	ret

0000294a <sprintf>:
    294a:	ae e0       	ldi	r26, 0x0E	; 14
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	eb ea       	ldi	r30, 0xAB	; 171
    2950:	f4 e1       	ldi	r31, 0x14	; 20
    2952:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__prologue_saves__+0x1c>
    2956:	0d 89       	ldd	r16, Y+21	; 0x15
    2958:	1e 89       	ldd	r17, Y+22	; 0x16
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	8c 83       	std	Y+4, r24	; 0x04
    295e:	1a 83       	std	Y+2, r17	; 0x02
    2960:	09 83       	std	Y+1, r16	; 0x01
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	9f e7       	ldi	r25, 0x7F	; 127
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	9e 01       	movw	r18, r28
    296c:	27 5e       	subi	r18, 0xE7	; 231
    296e:	3f 4f       	sbci	r19, 0xFF	; 255
    2970:	ce 01       	movw	r24, r28
    2972:	01 96       	adiw	r24, 0x01	; 1
    2974:	6f 89       	ldd	r22, Y+23	; 0x17
    2976:	78 8d       	ldd	r23, Y+24	; 0x18
    2978:	a9 01       	movw	r20, r18
    297a:	0e 94 c9 14 	call	0x2992	; 0x2992 <vfprintf>
    297e:	2f 81       	ldd	r18, Y+7	; 0x07
    2980:	38 85       	ldd	r19, Y+8	; 0x08
    2982:	02 0f       	add	r16, r18
    2984:	13 1f       	adc	r17, r19
    2986:	f8 01       	movw	r30, r16
    2988:	10 82       	st	Z, r1
    298a:	2e 96       	adiw	r28, 0x0e	; 14
    298c:	e4 e0       	ldi	r30, 0x04	; 4
    298e:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <__epilogue_restores__+0x1c>

00002992 <vfprintf>:
    2992:	ab e0       	ldi	r26, 0x0B	; 11
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	ef ec       	ldi	r30, 0xCF	; 207
    2998:	f4 e1       	ldi	r31, 0x14	; 20
    299a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__>
    299e:	3c 01       	movw	r6, r24
    29a0:	2b 01       	movw	r4, r22
    29a2:	5a 01       	movw	r10, r20
    29a4:	fc 01       	movw	r30, r24
    29a6:	17 82       	std	Z+7, r1	; 0x07
    29a8:	16 82       	std	Z+6, r1	; 0x06
    29aa:	83 81       	ldd	r24, Z+3	; 0x03
    29ac:	81 fd       	sbrc	r24, 1
    29ae:	03 c0       	rjmp	.+6      	; 0x29b6 <vfprintf+0x24>
    29b0:	6f ef       	ldi	r22, 0xFF	; 255
    29b2:	7f ef       	ldi	r23, 0xFF	; 255
    29b4:	c6 c1       	rjmp	.+908    	; 0x2d42 <vfprintf+0x3b0>
    29b6:	9a e0       	ldi	r25, 0x0A	; 10
    29b8:	89 2e       	mov	r8, r25
    29ba:	1e 01       	movw	r2, r28
    29bc:	08 94       	sec
    29be:	21 1c       	adc	r2, r1
    29c0:	31 1c       	adc	r3, r1
    29c2:	f3 01       	movw	r30, r6
    29c4:	23 81       	ldd	r18, Z+3	; 0x03
    29c6:	f2 01       	movw	r30, r4
    29c8:	23 fd       	sbrc	r18, 3
    29ca:	85 91       	lpm	r24, Z+
    29cc:	23 ff       	sbrs	r18, 3
    29ce:	81 91       	ld	r24, Z+
    29d0:	2f 01       	movw	r4, r30
    29d2:	88 23       	and	r24, r24
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <vfprintf+0x46>
    29d6:	b2 c1       	rjmp	.+868    	; 0x2d3c <vfprintf+0x3aa>
    29d8:	85 32       	cpi	r24, 0x25	; 37
    29da:	39 f4       	brne	.+14     	; 0x29ea <vfprintf+0x58>
    29dc:	23 fd       	sbrc	r18, 3
    29de:	85 91       	lpm	r24, Z+
    29e0:	23 ff       	sbrs	r18, 3
    29e2:	81 91       	ld	r24, Z+
    29e4:	2f 01       	movw	r4, r30
    29e6:	85 32       	cpi	r24, 0x25	; 37
    29e8:	29 f4       	brne	.+10     	; 0x29f4 <vfprintf+0x62>
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	b3 01       	movw	r22, r6
    29ee:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    29f2:	e7 cf       	rjmp	.-50     	; 0x29c2 <vfprintf+0x30>
    29f4:	98 2f       	mov	r25, r24
    29f6:	ff 24       	eor	r15, r15
    29f8:	ee 24       	eor	r14, r14
    29fa:	99 24       	eor	r9, r9
    29fc:	ff e1       	ldi	r31, 0x1F	; 31
    29fe:	ff 15       	cp	r31, r15
    2a00:	d0 f0       	brcs	.+52     	; 0x2a36 <vfprintf+0xa4>
    2a02:	9b 32       	cpi	r25, 0x2B	; 43
    2a04:	69 f0       	breq	.+26     	; 0x2a20 <vfprintf+0x8e>
    2a06:	9c 32       	cpi	r25, 0x2C	; 44
    2a08:	28 f4       	brcc	.+10     	; 0x2a14 <vfprintf+0x82>
    2a0a:	90 32       	cpi	r25, 0x20	; 32
    2a0c:	59 f0       	breq	.+22     	; 0x2a24 <vfprintf+0x92>
    2a0e:	93 32       	cpi	r25, 0x23	; 35
    2a10:	91 f4       	brne	.+36     	; 0x2a36 <vfprintf+0xa4>
    2a12:	0e c0       	rjmp	.+28     	; 0x2a30 <vfprintf+0x9e>
    2a14:	9d 32       	cpi	r25, 0x2D	; 45
    2a16:	49 f0       	breq	.+18     	; 0x2a2a <vfprintf+0x98>
    2a18:	90 33       	cpi	r25, 0x30	; 48
    2a1a:	69 f4       	brne	.+26     	; 0x2a36 <vfprintf+0xa4>
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	24 c0       	rjmp	.+72     	; 0x2a68 <vfprintf+0xd6>
    2a20:	52 e0       	ldi	r21, 0x02	; 2
    2a22:	f5 2a       	or	r15, r21
    2a24:	84 e0       	ldi	r24, 0x04	; 4
    2a26:	f8 2a       	or	r15, r24
    2a28:	28 c0       	rjmp	.+80     	; 0x2a7a <vfprintf+0xe8>
    2a2a:	98 e0       	ldi	r25, 0x08	; 8
    2a2c:	f9 2a       	or	r15, r25
    2a2e:	25 c0       	rjmp	.+74     	; 0x2a7a <vfprintf+0xe8>
    2a30:	e0 e1       	ldi	r30, 0x10	; 16
    2a32:	fe 2a       	or	r15, r30
    2a34:	22 c0       	rjmp	.+68     	; 0x2a7a <vfprintf+0xe8>
    2a36:	f7 fc       	sbrc	r15, 7
    2a38:	29 c0       	rjmp	.+82     	; 0x2a8c <vfprintf+0xfa>
    2a3a:	89 2f       	mov	r24, r25
    2a3c:	80 53       	subi	r24, 0x30	; 48
    2a3e:	8a 30       	cpi	r24, 0x0A	; 10
    2a40:	70 f4       	brcc	.+28     	; 0x2a5e <vfprintf+0xcc>
    2a42:	f6 fe       	sbrs	r15, 6
    2a44:	05 c0       	rjmp	.+10     	; 0x2a50 <vfprintf+0xbe>
    2a46:	98 9c       	mul	r9, r8
    2a48:	90 2c       	mov	r9, r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	98 0e       	add	r9, r24
    2a4e:	15 c0       	rjmp	.+42     	; 0x2a7a <vfprintf+0xe8>
    2a50:	e8 9c       	mul	r14, r8
    2a52:	e0 2c       	mov	r14, r0
    2a54:	11 24       	eor	r1, r1
    2a56:	e8 0e       	add	r14, r24
    2a58:	f0 e2       	ldi	r31, 0x20	; 32
    2a5a:	ff 2a       	or	r15, r31
    2a5c:	0e c0       	rjmp	.+28     	; 0x2a7a <vfprintf+0xe8>
    2a5e:	9e 32       	cpi	r25, 0x2E	; 46
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <vfprintf+0xda>
    2a62:	f6 fc       	sbrc	r15, 6
    2a64:	6b c1       	rjmp	.+726    	; 0x2d3c <vfprintf+0x3aa>
    2a66:	40 e4       	ldi	r20, 0x40	; 64
    2a68:	f4 2a       	or	r15, r20
    2a6a:	07 c0       	rjmp	.+14     	; 0x2a7a <vfprintf+0xe8>
    2a6c:	9c 36       	cpi	r25, 0x6C	; 108
    2a6e:	19 f4       	brne	.+6      	; 0x2a76 <vfprintf+0xe4>
    2a70:	50 e8       	ldi	r21, 0x80	; 128
    2a72:	f5 2a       	or	r15, r21
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <vfprintf+0xe8>
    2a76:	98 36       	cpi	r25, 0x68	; 104
    2a78:	49 f4       	brne	.+18     	; 0x2a8c <vfprintf+0xfa>
    2a7a:	f2 01       	movw	r30, r4
    2a7c:	23 fd       	sbrc	r18, 3
    2a7e:	95 91       	lpm	r25, Z+
    2a80:	23 ff       	sbrs	r18, 3
    2a82:	91 91       	ld	r25, Z+
    2a84:	2f 01       	movw	r4, r30
    2a86:	99 23       	and	r25, r25
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <vfprintf+0xfa>
    2a8a:	b8 cf       	rjmp	.-144    	; 0x29fc <vfprintf+0x6a>
    2a8c:	89 2f       	mov	r24, r25
    2a8e:	85 54       	subi	r24, 0x45	; 69
    2a90:	83 30       	cpi	r24, 0x03	; 3
    2a92:	18 f0       	brcs	.+6      	; 0x2a9a <vfprintf+0x108>
    2a94:	80 52       	subi	r24, 0x20	; 32
    2a96:	83 30       	cpi	r24, 0x03	; 3
    2a98:	38 f4       	brcc	.+14     	; 0x2aa8 <vfprintf+0x116>
    2a9a:	44 e0       	ldi	r20, 0x04	; 4
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	a4 0e       	add	r10, r20
    2aa0:	b5 1e       	adc	r11, r21
    2aa2:	5f e3       	ldi	r21, 0x3F	; 63
    2aa4:	59 83       	std	Y+1, r21	; 0x01
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <vfprintf+0x134>
    2aa8:	93 36       	cpi	r25, 0x63	; 99
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <vfprintf+0x126>
    2aac:	93 37       	cpi	r25, 0x73	; 115
    2aae:	79 f0       	breq	.+30     	; 0x2ace <vfprintf+0x13c>
    2ab0:	93 35       	cpi	r25, 0x53	; 83
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <vfprintf+0x124>
    2ab4:	56 c0       	rjmp	.+172    	; 0x2b62 <vfprintf+0x1d0>
    2ab6:	20 c0       	rjmp	.+64     	; 0x2af8 <vfprintf+0x166>
    2ab8:	f5 01       	movw	r30, r10
    2aba:	80 81       	ld	r24, Z
    2abc:	89 83       	std	Y+1, r24	; 0x01
    2abe:	42 e0       	ldi	r20, 0x02	; 2
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	a4 0e       	add	r10, r20
    2ac4:	b5 1e       	adc	r11, r21
    2ac6:	61 01       	movw	r12, r2
    2ac8:	01 e0       	ldi	r16, 0x01	; 1
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	12 c0       	rjmp	.+36     	; 0x2af2 <vfprintf+0x160>
    2ace:	f5 01       	movw	r30, r10
    2ad0:	c0 80       	ld	r12, Z
    2ad2:	d1 80       	ldd	r13, Z+1	; 0x01
    2ad4:	f6 fc       	sbrc	r15, 6
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <vfprintf+0x14c>
    2ad8:	6f ef       	ldi	r22, 0xFF	; 255
    2ada:	7f ef       	ldi	r23, 0xFF	; 255
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <vfprintf+0x150>
    2ade:	69 2d       	mov	r22, r9
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	42 e0       	ldi	r20, 0x02	; 2
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	a4 0e       	add	r10, r20
    2ae8:	b5 1e       	adc	r11, r21
    2aea:	c6 01       	movw	r24, r12
    2aec:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <strnlen>
    2af0:	8c 01       	movw	r16, r24
    2af2:	5f e7       	ldi	r21, 0x7F	; 127
    2af4:	f5 22       	and	r15, r21
    2af6:	14 c0       	rjmp	.+40     	; 0x2b20 <vfprintf+0x18e>
    2af8:	f5 01       	movw	r30, r10
    2afa:	c0 80       	ld	r12, Z
    2afc:	d1 80       	ldd	r13, Z+1	; 0x01
    2afe:	f6 fc       	sbrc	r15, 6
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <vfprintf+0x176>
    2b02:	6f ef       	ldi	r22, 0xFF	; 255
    2b04:	7f ef       	ldi	r23, 0xFF	; 255
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <vfprintf+0x17a>
    2b08:	69 2d       	mov	r22, r9
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	42 e0       	ldi	r20, 0x02	; 2
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	a4 0e       	add	r10, r20
    2b12:	b5 1e       	adc	r11, r21
    2b14:	c6 01       	movw	r24, r12
    2b16:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <strnlen_P>
    2b1a:	8c 01       	movw	r16, r24
    2b1c:	50 e8       	ldi	r21, 0x80	; 128
    2b1e:	f5 2a       	or	r15, r21
    2b20:	f3 fe       	sbrs	r15, 3
    2b22:	07 c0       	rjmp	.+14     	; 0x2b32 <vfprintf+0x1a0>
    2b24:	1a c0       	rjmp	.+52     	; 0x2b5a <vfprintf+0x1c8>
    2b26:	80 e2       	ldi	r24, 0x20	; 32
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	b3 01       	movw	r22, r6
    2b2c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2b30:	ea 94       	dec	r14
    2b32:	8e 2d       	mov	r24, r14
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	08 17       	cp	r16, r24
    2b38:	19 07       	cpc	r17, r25
    2b3a:	a8 f3       	brcs	.-22     	; 0x2b26 <vfprintf+0x194>
    2b3c:	0e c0       	rjmp	.+28     	; 0x2b5a <vfprintf+0x1c8>
    2b3e:	f6 01       	movw	r30, r12
    2b40:	f7 fc       	sbrc	r15, 7
    2b42:	85 91       	lpm	r24, Z+
    2b44:	f7 fe       	sbrs	r15, 7
    2b46:	81 91       	ld	r24, Z+
    2b48:	6f 01       	movw	r12, r30
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	b3 01       	movw	r22, r6
    2b4e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2b52:	e1 10       	cpse	r14, r1
    2b54:	ea 94       	dec	r14
    2b56:	01 50       	subi	r16, 0x01	; 1
    2b58:	10 40       	sbci	r17, 0x00	; 0
    2b5a:	01 15       	cp	r16, r1
    2b5c:	11 05       	cpc	r17, r1
    2b5e:	79 f7       	brne	.-34     	; 0x2b3e <vfprintf+0x1ac>
    2b60:	ea c0       	rjmp	.+468    	; 0x2d36 <vfprintf+0x3a4>
    2b62:	94 36       	cpi	r25, 0x64	; 100
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <vfprintf+0x1d8>
    2b66:	99 36       	cpi	r25, 0x69	; 105
    2b68:	69 f5       	brne	.+90     	; 0x2bc4 <vfprintf+0x232>
    2b6a:	f7 fe       	sbrs	r15, 7
    2b6c:	08 c0       	rjmp	.+16     	; 0x2b7e <vfprintf+0x1ec>
    2b6e:	f5 01       	movw	r30, r10
    2b70:	20 81       	ld	r18, Z
    2b72:	31 81       	ldd	r19, Z+1	; 0x01
    2b74:	42 81       	ldd	r20, Z+2	; 0x02
    2b76:	53 81       	ldd	r21, Z+3	; 0x03
    2b78:	84 e0       	ldi	r24, 0x04	; 4
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0a c0       	rjmp	.+20     	; 0x2b92 <vfprintf+0x200>
    2b7e:	f5 01       	movw	r30, r10
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	9c 01       	movw	r18, r24
    2b86:	44 27       	eor	r20, r20
    2b88:	37 fd       	sbrc	r19, 7
    2b8a:	40 95       	com	r20
    2b8c:	54 2f       	mov	r21, r20
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	a8 0e       	add	r10, r24
    2b94:	b9 1e       	adc	r11, r25
    2b96:	9f e6       	ldi	r25, 0x6F	; 111
    2b98:	f9 22       	and	r15, r25
    2b9a:	57 ff       	sbrs	r21, 7
    2b9c:	09 c0       	rjmp	.+18     	; 0x2bb0 <vfprintf+0x21e>
    2b9e:	50 95       	com	r21
    2ba0:	40 95       	com	r20
    2ba2:	30 95       	com	r19
    2ba4:	21 95       	neg	r18
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	4f 4f       	sbci	r20, 0xFF	; 255
    2baa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bac:	e0 e8       	ldi	r30, 0x80	; 128
    2bae:	fe 2a       	or	r15, r30
    2bb0:	ca 01       	movw	r24, r20
    2bb2:	b9 01       	movw	r22, r18
    2bb4:	a1 01       	movw	r20, r2
    2bb6:	2a e0       	ldi	r18, 0x0A	; 10
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__ultoa_invert>
    2bbe:	d8 2e       	mov	r13, r24
    2bc0:	d2 18       	sub	r13, r2
    2bc2:	40 c0       	rjmp	.+128    	; 0x2c44 <vfprintf+0x2b2>
    2bc4:	95 37       	cpi	r25, 0x75	; 117
    2bc6:	29 f4       	brne	.+10     	; 0x2bd2 <vfprintf+0x240>
    2bc8:	1f 2d       	mov	r17, r15
    2bca:	1f 7e       	andi	r17, 0xEF	; 239
    2bcc:	2a e0       	ldi	r18, 0x0A	; 10
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	1d c0       	rjmp	.+58     	; 0x2c0c <vfprintf+0x27a>
    2bd2:	1f 2d       	mov	r17, r15
    2bd4:	19 7f       	andi	r17, 0xF9	; 249
    2bd6:	9f 36       	cpi	r25, 0x6F	; 111
    2bd8:	61 f0       	breq	.+24     	; 0x2bf2 <vfprintf+0x260>
    2bda:	90 37       	cpi	r25, 0x70	; 112
    2bdc:	20 f4       	brcc	.+8      	; 0x2be6 <vfprintf+0x254>
    2bde:	98 35       	cpi	r25, 0x58	; 88
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <vfprintf+0x252>
    2be2:	ac c0       	rjmp	.+344    	; 0x2d3c <vfprintf+0x3aa>
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <vfprintf+0x272>
    2be6:	90 37       	cpi	r25, 0x70	; 112
    2be8:	39 f0       	breq	.+14     	; 0x2bf8 <vfprintf+0x266>
    2bea:	98 37       	cpi	r25, 0x78	; 120
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <vfprintf+0x25e>
    2bee:	a6 c0       	rjmp	.+332    	; 0x2d3c <vfprintf+0x3aa>
    2bf0:	04 c0       	rjmp	.+8      	; 0x2bfa <vfprintf+0x268>
    2bf2:	28 e0       	ldi	r18, 0x08	; 8
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	0a c0       	rjmp	.+20     	; 0x2c0c <vfprintf+0x27a>
    2bf8:	10 61       	ori	r17, 0x10	; 16
    2bfa:	14 fd       	sbrc	r17, 4
    2bfc:	14 60       	ori	r17, 0x04	; 4
    2bfe:	20 e1       	ldi	r18, 0x10	; 16
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <vfprintf+0x27a>
    2c04:	14 fd       	sbrc	r17, 4
    2c06:	16 60       	ori	r17, 0x06	; 6
    2c08:	20 e1       	ldi	r18, 0x10	; 16
    2c0a:	32 e0       	ldi	r19, 0x02	; 2
    2c0c:	17 ff       	sbrs	r17, 7
    2c0e:	08 c0       	rjmp	.+16     	; 0x2c20 <vfprintf+0x28e>
    2c10:	f5 01       	movw	r30, r10
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	93 81       	ldd	r25, Z+3	; 0x03
    2c1a:	44 e0       	ldi	r20, 0x04	; 4
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	08 c0       	rjmp	.+16     	; 0x2c30 <vfprintf+0x29e>
    2c20:	f5 01       	movw	r30, r10
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	bc 01       	movw	r22, r24
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	42 e0       	ldi	r20, 0x02	; 2
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	a4 0e       	add	r10, r20
    2c32:	b5 1e       	adc	r11, r21
    2c34:	a1 01       	movw	r20, r2
    2c36:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__ultoa_invert>
    2c3a:	d8 2e       	mov	r13, r24
    2c3c:	d2 18       	sub	r13, r2
    2c3e:	8f e7       	ldi	r24, 0x7F	; 127
    2c40:	f8 2e       	mov	r15, r24
    2c42:	f1 22       	and	r15, r17
    2c44:	f6 fe       	sbrs	r15, 6
    2c46:	0b c0       	rjmp	.+22     	; 0x2c5e <vfprintf+0x2cc>
    2c48:	5e ef       	ldi	r21, 0xFE	; 254
    2c4a:	f5 22       	and	r15, r21
    2c4c:	d9 14       	cp	r13, r9
    2c4e:	38 f4       	brcc	.+14     	; 0x2c5e <vfprintf+0x2cc>
    2c50:	f4 fe       	sbrs	r15, 4
    2c52:	07 c0       	rjmp	.+14     	; 0x2c62 <vfprintf+0x2d0>
    2c54:	f2 fc       	sbrc	r15, 2
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <vfprintf+0x2d0>
    2c58:	8f ee       	ldi	r24, 0xEF	; 239
    2c5a:	f8 22       	and	r15, r24
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <vfprintf+0x2d0>
    2c5e:	1d 2d       	mov	r17, r13
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <vfprintf+0x2d2>
    2c62:	19 2d       	mov	r17, r9
    2c64:	f4 fe       	sbrs	r15, 4
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <vfprintf+0x2f0>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	ed 0d       	add	r30, r13
    2c6c:	f1 1d       	adc	r31, r1
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 33       	cpi	r24, 0x30	; 48
    2c72:	19 f4       	brne	.+6      	; 0x2c7a <vfprintf+0x2e8>
    2c74:	99 ee       	ldi	r25, 0xE9	; 233
    2c76:	f9 22       	and	r15, r25
    2c78:	08 c0       	rjmp	.+16     	; 0x2c8a <vfprintf+0x2f8>
    2c7a:	1f 5f       	subi	r17, 0xFF	; 255
    2c7c:	f2 fe       	sbrs	r15, 2
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <vfprintf+0x2f8>
    2c80:	03 c0       	rjmp	.+6      	; 0x2c88 <vfprintf+0x2f6>
    2c82:	8f 2d       	mov	r24, r15
    2c84:	86 78       	andi	r24, 0x86	; 134
    2c86:	09 f0       	breq	.+2      	; 0x2c8a <vfprintf+0x2f8>
    2c88:	1f 5f       	subi	r17, 0xFF	; 255
    2c8a:	0f 2d       	mov	r16, r15
    2c8c:	f3 fc       	sbrc	r15, 3
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <vfprintf+0x326>
    2c90:	f0 fe       	sbrs	r15, 0
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <vfprintf+0x320>
    2c94:	1e 15       	cp	r17, r14
    2c96:	10 f0       	brcs	.+4      	; 0x2c9c <vfprintf+0x30a>
    2c98:	9d 2c       	mov	r9, r13
    2c9a:	0b c0       	rjmp	.+22     	; 0x2cb2 <vfprintf+0x320>
    2c9c:	9d 2c       	mov	r9, r13
    2c9e:	9e 0c       	add	r9, r14
    2ca0:	91 1a       	sub	r9, r17
    2ca2:	1e 2d       	mov	r17, r14
    2ca4:	06 c0       	rjmp	.+12     	; 0x2cb2 <vfprintf+0x320>
    2ca6:	80 e2       	ldi	r24, 0x20	; 32
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	b3 01       	movw	r22, r6
    2cac:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2cb0:	1f 5f       	subi	r17, 0xFF	; 255
    2cb2:	1e 15       	cp	r17, r14
    2cb4:	c0 f3       	brcs	.-16     	; 0x2ca6 <vfprintf+0x314>
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <vfprintf+0x32e>
    2cb8:	1e 15       	cp	r17, r14
    2cba:	10 f4       	brcc	.+4      	; 0x2cc0 <vfprintf+0x32e>
    2cbc:	e1 1a       	sub	r14, r17
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <vfprintf+0x330>
    2cc0:	ee 24       	eor	r14, r14
    2cc2:	04 ff       	sbrs	r16, 4
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <vfprintf+0x352>
    2cc6:	80 e3       	ldi	r24, 0x30	; 48
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	b3 01       	movw	r22, r6
    2ccc:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2cd0:	02 ff       	sbrs	r16, 2
    2cd2:	1d c0       	rjmp	.+58     	; 0x2d0e <vfprintf+0x37c>
    2cd4:	01 fd       	sbrc	r16, 1
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <vfprintf+0x34c>
    2cd8:	88 e7       	ldi	r24, 0x78	; 120
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e c0       	rjmp	.+28     	; 0x2cfa <vfprintf+0x368>
    2cde:	88 e5       	ldi	r24, 0x58	; 88
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0b c0       	rjmp	.+22     	; 0x2cfa <vfprintf+0x368>
    2ce4:	80 2f       	mov	r24, r16
    2ce6:	86 78       	andi	r24, 0x86	; 134
    2ce8:	91 f0       	breq	.+36     	; 0x2d0e <vfprintf+0x37c>
    2cea:	01 ff       	sbrs	r16, 1
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0x360>
    2cee:	8b e2       	ldi	r24, 0x2B	; 43
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <vfprintf+0x362>
    2cf2:	80 e2       	ldi	r24, 0x20	; 32
    2cf4:	f7 fc       	sbrc	r15, 7
    2cf6:	8d e2       	ldi	r24, 0x2D	; 45
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	b3 01       	movw	r22, r6
    2cfc:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2d00:	06 c0       	rjmp	.+12     	; 0x2d0e <vfprintf+0x37c>
    2d02:	80 e3       	ldi	r24, 0x30	; 48
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	b3 01       	movw	r22, r6
    2d08:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2d0c:	9a 94       	dec	r9
    2d0e:	d9 14       	cp	r13, r9
    2d10:	c0 f3       	brcs	.-16     	; 0x2d02 <vfprintf+0x370>
    2d12:	da 94       	dec	r13
    2d14:	f1 01       	movw	r30, r2
    2d16:	ed 0d       	add	r30, r13
    2d18:	f1 1d       	adc	r31, r1
    2d1a:	80 81       	ld	r24, Z
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	b3 01       	movw	r22, r6
    2d20:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2d24:	dd 20       	and	r13, r13
    2d26:	a9 f7       	brne	.-22     	; 0x2d12 <vfprintf+0x380>
    2d28:	06 c0       	rjmp	.+12     	; 0x2d36 <vfprintf+0x3a4>
    2d2a:	80 e2       	ldi	r24, 0x20	; 32
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	b3 01       	movw	r22, r6
    2d30:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <fputc>
    2d34:	ea 94       	dec	r14
    2d36:	ee 20       	and	r14, r14
    2d38:	c1 f7       	brne	.-16     	; 0x2d2a <vfprintf+0x398>
    2d3a:	43 ce       	rjmp	.-890    	; 0x29c2 <vfprintf+0x30>
    2d3c:	f3 01       	movw	r30, r6
    2d3e:	66 81       	ldd	r22, Z+6	; 0x06
    2d40:	77 81       	ldd	r23, Z+7	; 0x07
    2d42:	cb 01       	movw	r24, r22
    2d44:	2b 96       	adiw	r28, 0x0b	; 11
    2d46:	e2 e1       	ldi	r30, 0x12	; 18
    2d48:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__>

00002d4c <strnlen_P>:
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	05 90       	lpm	r0, Z+
    2d50:	61 50       	subi	r22, 0x01	; 1
    2d52:	70 40       	sbci	r23, 0x00	; 0
    2d54:	01 10       	cpse	r0, r1
    2d56:	d8 f7       	brcc	.-10     	; 0x2d4e <strnlen_P+0x2>
    2d58:	80 95       	com	r24
    2d5a:	90 95       	com	r25
    2d5c:	8e 0f       	add	r24, r30
    2d5e:	9f 1f       	adc	r25, r31
    2d60:	08 95       	ret

00002d62 <strnlen>:
    2d62:	fc 01       	movw	r30, r24
    2d64:	61 50       	subi	r22, 0x01	; 1
    2d66:	70 40       	sbci	r23, 0x00	; 0
    2d68:	01 90       	ld	r0, Z+
    2d6a:	01 10       	cpse	r0, r1
    2d6c:	d8 f7       	brcc	.-10     	; 0x2d64 <strnlen+0x2>
    2d6e:	80 95       	com	r24
    2d70:	90 95       	com	r25
    2d72:	8e 0f       	add	r24, r30
    2d74:	9f 1f       	adc	r25, r31
    2d76:	08 95       	ret

00002d78 <fputc>:
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	8c 01       	movw	r16, r24
    2d82:	eb 01       	movw	r28, r22
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	81 ff       	sbrs	r24, 1
    2d88:	1b c0       	rjmp	.+54     	; 0x2dc0 <fputc+0x48>
    2d8a:	82 ff       	sbrs	r24, 2
    2d8c:	0d c0       	rjmp	.+26     	; 0x2da8 <fputc+0x30>
    2d8e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d90:	3f 81       	ldd	r19, Y+7	; 0x07
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	9d 81       	ldd	r25, Y+5	; 0x05
    2d96:	28 17       	cp	r18, r24
    2d98:	39 07       	cpc	r19, r25
    2d9a:	64 f4       	brge	.+24     	; 0x2db4 <fputc+0x3c>
    2d9c:	e8 81       	ld	r30, Y
    2d9e:	f9 81       	ldd	r31, Y+1	; 0x01
    2da0:	01 93       	st	Z+, r16
    2da2:	f9 83       	std	Y+1, r31	; 0x01
    2da4:	e8 83       	st	Y, r30
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <fputc+0x3c>
    2da8:	e8 85       	ldd	r30, Y+8	; 0x08
    2daa:	f9 85       	ldd	r31, Y+9	; 0x09
    2dac:	80 2f       	mov	r24, r16
    2dae:	09 95       	icall
    2db0:	89 2b       	or	r24, r25
    2db2:	31 f4       	brne	.+12     	; 0x2dc0 <fputc+0x48>
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	9f 81       	ldd	r25, Y+7	; 0x07
    2db8:	01 96       	adiw	r24, 0x01	; 1
    2dba:	9f 83       	std	Y+7, r25	; 0x07
    2dbc:	8e 83       	std	Y+6, r24	; 0x06
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <fputc+0x4c>
    2dc0:	0f ef       	ldi	r16, 0xFF	; 255
    2dc2:	1f ef       	ldi	r17, 0xFF	; 255
    2dc4:	c8 01       	movw	r24, r16
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	08 95       	ret

00002dd0 <__ultoa_invert>:
    2dd0:	fa 01       	movw	r30, r20
    2dd2:	aa 27       	eor	r26, r26
    2dd4:	28 30       	cpi	r18, 0x08	; 8
    2dd6:	51 f1       	breq	.+84     	; 0x2e2c <__ultoa_invert+0x5c>
    2dd8:	20 31       	cpi	r18, 0x10	; 16
    2dda:	81 f1       	breq	.+96     	; 0x2e3c <__ultoa_invert+0x6c>
    2ddc:	e8 94       	clt
    2dde:	6f 93       	push	r22
    2de0:	6e 7f       	andi	r22, 0xFE	; 254
    2de2:	6e 5f       	subi	r22, 0xFE	; 254
    2de4:	7f 4f       	sbci	r23, 0xFF	; 255
    2de6:	8f 4f       	sbci	r24, 0xFF	; 255
    2de8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dea:	af 4f       	sbci	r26, 0xFF	; 255
    2dec:	b1 e0       	ldi	r27, 0x01	; 1
    2dee:	3e d0       	rcall	.+124    	; 0x2e6c <__ultoa_invert+0x9c>
    2df0:	b4 e0       	ldi	r27, 0x04	; 4
    2df2:	3c d0       	rcall	.+120    	; 0x2e6c <__ultoa_invert+0x9c>
    2df4:	67 0f       	add	r22, r23
    2df6:	78 1f       	adc	r23, r24
    2df8:	89 1f       	adc	r24, r25
    2dfa:	9a 1f       	adc	r25, r26
    2dfc:	a1 1d       	adc	r26, r1
    2dfe:	68 0f       	add	r22, r24
    2e00:	79 1f       	adc	r23, r25
    2e02:	8a 1f       	adc	r24, r26
    2e04:	91 1d       	adc	r25, r1
    2e06:	a1 1d       	adc	r26, r1
    2e08:	6a 0f       	add	r22, r26
    2e0a:	71 1d       	adc	r23, r1
    2e0c:	81 1d       	adc	r24, r1
    2e0e:	91 1d       	adc	r25, r1
    2e10:	a1 1d       	adc	r26, r1
    2e12:	20 d0       	rcall	.+64     	; 0x2e54 <__ultoa_invert+0x84>
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <__ultoa_invert+0x48>
    2e16:	68 94       	set
    2e18:	3f 91       	pop	r19
    2e1a:	2a e0       	ldi	r18, 0x0A	; 10
    2e1c:	26 9f       	mul	r18, r22
    2e1e:	11 24       	eor	r1, r1
    2e20:	30 19       	sub	r19, r0
    2e22:	30 5d       	subi	r19, 0xD0	; 208
    2e24:	31 93       	st	Z+, r19
    2e26:	de f6       	brtc	.-74     	; 0x2dde <__ultoa_invert+0xe>
    2e28:	cf 01       	movw	r24, r30
    2e2a:	08 95       	ret
    2e2c:	46 2f       	mov	r20, r22
    2e2e:	47 70       	andi	r20, 0x07	; 7
    2e30:	40 5d       	subi	r20, 0xD0	; 208
    2e32:	41 93       	st	Z+, r20
    2e34:	b3 e0       	ldi	r27, 0x03	; 3
    2e36:	0f d0       	rcall	.+30     	; 0x2e56 <__ultoa_invert+0x86>
    2e38:	c9 f7       	brne	.-14     	; 0x2e2c <__ultoa_invert+0x5c>
    2e3a:	f6 cf       	rjmp	.-20     	; 0x2e28 <__ultoa_invert+0x58>
    2e3c:	46 2f       	mov	r20, r22
    2e3e:	4f 70       	andi	r20, 0x0F	; 15
    2e40:	40 5d       	subi	r20, 0xD0	; 208
    2e42:	4a 33       	cpi	r20, 0x3A	; 58
    2e44:	18 f0       	brcs	.+6      	; 0x2e4c <__ultoa_invert+0x7c>
    2e46:	49 5d       	subi	r20, 0xD9	; 217
    2e48:	31 fd       	sbrc	r19, 1
    2e4a:	40 52       	subi	r20, 0x20	; 32
    2e4c:	41 93       	st	Z+, r20
    2e4e:	02 d0       	rcall	.+4      	; 0x2e54 <__ultoa_invert+0x84>
    2e50:	a9 f7       	brne	.-22     	; 0x2e3c <__ultoa_invert+0x6c>
    2e52:	ea cf       	rjmp	.-44     	; 0x2e28 <__ultoa_invert+0x58>
    2e54:	b4 e0       	ldi	r27, 0x04	; 4
    2e56:	a6 95       	lsr	r26
    2e58:	97 95       	ror	r25
    2e5a:	87 95       	ror	r24
    2e5c:	77 95       	ror	r23
    2e5e:	67 95       	ror	r22
    2e60:	ba 95       	dec	r27
    2e62:	c9 f7       	brne	.-14     	; 0x2e56 <__ultoa_invert+0x86>
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	61 05       	cpc	r22, r1
    2e68:	71 05       	cpc	r23, r1
    2e6a:	08 95       	ret
    2e6c:	9b 01       	movw	r18, r22
    2e6e:	ac 01       	movw	r20, r24
    2e70:	0a 2e       	mov	r0, r26
    2e72:	06 94       	lsr	r0
    2e74:	57 95       	ror	r21
    2e76:	47 95       	ror	r20
    2e78:	37 95       	ror	r19
    2e7a:	27 95       	ror	r18
    2e7c:	ba 95       	dec	r27
    2e7e:	c9 f7       	brne	.-14     	; 0x2e72 <__ultoa_invert+0xa2>
    2e80:	62 0f       	add	r22, r18
    2e82:	73 1f       	adc	r23, r19
    2e84:	84 1f       	adc	r24, r20
    2e86:	95 1f       	adc	r25, r21
    2e88:	a0 1d       	adc	r26, r0
    2e8a:	08 95       	ret

00002e8c <_exit>:
    2e8c:	f8 94       	cli

00002e8e <__stop_program>:
    2e8e:	ff cf       	rjmp	.-2      	; 0x2e8e <__stop_program>
